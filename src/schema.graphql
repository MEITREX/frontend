type AccessToken {
  accessToken: String!
  externalUserId: String
}

type Achievement implements HasGoal {
  completed: Boolean!
  completedCount: Int
  courseId: UUID!
  description: String!
  id: UUID
  imageUrl: String!
  name: String!
  requiredCount: Int
  trackingEndTime: DateTime
  trackingStartTime: DateTime
  userId: UUID
}

type AiEntityProcessingProgress {
  entityId: UUID!
  queuePosition: Int
  state: AiEntityProcessingState!
}

enum AiEntityProcessingState {
  DONE
  ENQUEUED
  PROCESSING
  UNKNOWN
}

input AiGenQuestionContext {
  description: String!
  maxAnswersPerQuestion: Int! = 5
  maxExactQuestions: Int! = 5
  maxFreeTextQuestions: Int! = 5
  maxMultipleChoiceQuestions: Int! = 5
  maxNumericQuestions: Int! = 5
  mediaRecordIds: [UUID]!
  minExactQuestions: Int! = 1
  minFreeTextQuestions: Int! = 1
  minMultipleChoiceQuestions: Int! = 1
  minNumericQuestions: Int! = 1
}

input AnswerInput {
  playerTypes: [PlayerType!]!
  text: String!
}

interface Assessment {
  assessmentMetadata: AssessmentMetadata!
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  items: [Item!]!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  userProgressData: UserProgressData!
}

type AssessmentContentReference {
  assessmentId: UUID!
}

type AssessmentMetadata {
  initialLearningInterval: Int
  skillPoints: Int!
  skillTypes: [SkillType!]!
}

input AssessmentMetadataInput {
  initialLearningInterval: Int
  skillPoints: Int!
  skillTypes: [SkillType!]!
}

type AssessmentSemanticSearchResult implements SemanticSearchResult {
  assessment: Assessment!
  assessmentId: UUID!
  score: Float!
}

type Assignment {
  assessmentId: UUID!
  assignmentType: AssignmentType!
  codeAssignmentMetadata: CodeAssignmentMetadata
  content: Content
  courseId: UUID!
  date: DateTime
  description: String
  exercises: [Exercise!]
  externalId: String
  requiredPercentage: Float
  totalCredits: Float
}

type AssignmentAssessment implements Assessment & Content {
  aiProcessingProgress: AiEntityProcessingProgress!
  assessmentMetadata: AssessmentMetadata!
  assignment: Assignment
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  items: [Item!]!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  suggestedTags: [String!]!
  userProgressData: UserProgressData!
}

type AssignmentCompletedFeedback {
  correctness: Float!
  success: Boolean!
}

type AssignmentMutation {
  assessmentId: UUID!
  createExercise(input: CreateExerciseInput!): Exercise!
  createSubexercise(input: CreateSubexerciseInput!): Subexercise!
  deleteExercise(itemId: UUID!): UUID!
  deleteSubexercise(itemId: UUID!): UUID!
  updateExercise(input: UpdateExerciseInput!): Exercise!
  updateSubexercise(input: UpdateSubexerciseInput!): Subexercise!
}

enum AssignmentType {
  CODE_ASSIGNMENT
  EXERCISE_SHEET
  PHYSICAL_TEST
}

input AssociationInput {
  feedback: JSON
  itemId: UUID
  left: String!
  right: String!
}

type AssociationQuestion implements Question {
  aiGenerated: Boolean!
  correctAssociations: [SingleAssociation!]!
  hint: JSON
  item: Item!
  itemId: UUID!
  leftSide: [String!]!
  number: Int!
  rightSide: [String!]!
  text: JSON!
  type: QuestionType!
}

enum BloomLevel {
  ANALYZE
  APPLY
  CREATE
  EVALUATE
  REMEMBER
  UNDERSTAND
}

type Chapter {
  achievableSkillTypes: [SkillType]!
  contents: [Content!]!
  contentsWithNoSection: [Content!]!
  course: Course!
  description: String!
  endDate: DateTime!
  id: UUID!
  number: Int!
  sections: [Section!]!
  skills: [Skill]!
  startDate: DateTime!
  suggestedEndDate: DateTime
  suggestedStartDate: DateTime
  title: String!
  userProgress: CompositeProgressInformation!
}

input ChapterFilter {
  and: [ChapterFilter!]
  description: StringFilter
  endDate: DateTimeFilter
  not: ChapterFilter
  number: IntFilter
  or: [ChapterFilter!]
  startDate: DateTimeFilter
  suggestedEndDate: DateTimeFilter
  suggestedStartDate: DateTimeFilter
  title: StringFilter
}

type ChapterPayload {
  elements: [Chapter!]!
  pagination: PaginationInfo!
}

type ClozeBlankElement {
  correctAnswer: String!
  feedback: JSON
}

union ClozeElement = ClozeTextElement | ClozeBlankElement

input ClozeElementInput {
  correctAnswer: String
  feedback: JSON
  text: JSON
  type: ClozeElementType!
}

enum ClozeElementType {
  BLANK
  TEXT
}

type ClozeQuestion implements Question {
  additionalWrongAnswers: [String!]!
  aiGenerated: Boolean!
  allBlanks: [String!]!
  clozeElements: [ClozeElement!]!
  hint: JSON
  item: Item!
  itemId: UUID!
  number: Int!
  showBlanksList: Boolean!
  type: QuestionType!
}

type ClozeTextElement {
  text: JSON!
}

type CodeAssignmentGradingMetadata {
  feedbackTableHtml: String
  repoLink: String
  status: String
}

type CodeAssignmentMetadata {
  assignmentLink: String
  invitationLink: String
  readmeHtml: String
}

type CompositeProgressInformation {
  completedContents: Int!
  progress: Float!
  totalContents: Int!
}

directive @ContainerNotEmpty(message: String = "graphql.validation.ContainerNotEmpty.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @ContainerSize(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.ContainerSize.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

interface Content {
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  userProgressData: UserProgressData!
}

type ContentMetadata {
  chapter: Chapter!
  chapterId: UUID!
  course: Course!
  courseId: UUID!
  name: String!
  rewardPoints: Int!
  suggestedDate: DateTime!
  tagNames: [String!]!
  type: ContentType!
}

type ContentMutation {
  addTagToContent(tagName: String): Content!
  contentId: UUID!
  deleteContent: UUID!
  removeTagFromContent(tagName: String): Content!
  updateAssessment(input: UpdateAssessmentInput!): Assessment!
  updateMediaContent(input: UpdateMediaContentInput!): MediaContent!
}

type ContentPayload {
  elements: [Content!]!
  pageInfo: PaginationInfo!
}

enum ContentType {
  ASSIGNMENT
  FLASHCARDS
  MEDIA
  QUIZ
}

type Course {
  chapters(filter: ChapterFilter, pagination: Pagination, sortBy: [String!]! = [], sortDirection: [SortDirection!]! = [ASC]): ChapterPayload!
  description: String!
  endDate: DateTime!
  id: UUID!
  mediaRecords: [MediaRecord!]!
  memberships: [CourseMembership!]!
  published: Boolean!
  rewardScores: RewardScores!
  scoreboard: [ScoreboardItem!]!
  skills: [Skill!]!
  startDate: DateTime!
  startYear: Int
  suggestions(amount: Int!, skillTypes: [SkillType!]! = []): [Suggestion!]!
  title: String!
  userProgress: CompositeProgressInformation!
  yearDivision: YearDivision
}

input CourseFilter {
  and: [CourseFilter!]
  description: StringFilter
  endDate: DateTimeFilter
  not: CourseFilter
  or: [CourseFilter!]
  published: Boolean
  startDate: DateTimeFilter
  title: StringFilter
}

type CourseMembership {
  course: Course!
  courseId: UUID!
  role: UserRoleInCourse!
  user: PublicUserInfo
  userId: UUID!
}

input CourseMembershipInput {
  courseId: UUID!
  role: UserRoleInCourse!
  userId: UUID!
}

type CoursePayload {
  elements: [Course!]!
  pagination: PaginationInfo!
}

input CreateAssessmentInput {
  assessmentMetadata: AssessmentMetadataInput!
  items: [CreateItemInput!]
  metadata: CreateContentMetadataInput!
}

input CreateAssignmentInput {
  assignmentType: AssignmentType!
  date: DateTime
  description: String
  exercises: [CreateExerciseInput!]
  externalId: String
  requiredPercentage: Float
  totalCredits: Float
}

input CreateAssociationInput {
  feedback: JSON
  left: String!
  right: String!
}

input CreateAssociationQuestionInput {
  correctAssociations: [AssociationInput!]!
  hint: JSON
  itemId: UUID!
  number: Int
  text: JSON!
}

input CreateAssociationQuestionInputWithoutItem {
  correctAssociations: [CreateAssociationInput!]!
  hint: JSON
  number: Int
  text: JSON!
}

input CreateChapterInput {
  courseId: UUID!
  description: String!
  endDate: DateTime!
  number: Int!
  startDate: DateTime!
  suggestedEndDate: DateTime
  suggestedStartDate: DateTime
  title: String!
}

input CreateClozeElementInput {
  correctAnswer: String
  feedback: JSON
  text: JSON
  type: ClozeElementType!
}

input CreateClozeQuestionInput {
  additionalWrongAnswers: [String!]! = []
  clozeElements: [ClozeElementInput!]!
  hint: JSON
  itemId: UUID!
  number: Int
  showBlanksList: Boolean! = true
}

input CreateClozeQuestionInputWithoutItem {
  additionalWrongAnswers: [String!]! = []
  clozeElements: [CreateClozeElementInput!]!
  hint: JSON
  number: Int
  showBlanksList: Boolean! = true
}

input CreateContentMetadataInput {
  chapterId: UUID!
  name: String!
  rewardPoints: Int!
  suggestedDate: DateTime!
  tagNames: [String!]! = []
  type: ContentType!
}

input CreateCourseInput {
  description: String!
  endDate: DateTime!
  published: Boolean!
  startDate: DateTime!
  startYear: Int
  title: String!
  yearDivision: YearDivision
}

input CreateExactAnswerQuestionInput {
  caseSensitive: Boolean! = false
  correctAnswers: [String!]!
  feedback: JSON
  hint: JSON
  itemId: UUID
  number: Int
  text: JSON!
}

input CreateExactAnswerQuestionInputWithoutItem {
  caseSensitive: Boolean! = false
  correctAnswers: [String!]!
  feedback: JSON
  hint: JSON
  number: Int
  text: JSON!
}

input CreateExerciseInput {
  itemId: UUID!
  number: String
  subexercises: [CreateSubexerciseInput!]!
  totalExerciseCredits: Float!
}

input CreateFlashcardInput {
  itemId: UUID
  sides: [FlashcardSideInput!]!
}

input CreateFlashcardInputWithoutItem {
  sides: [FlashcardSideInput!]!
}

input CreateFlashcardSetInput {
  flashcards: [CreateFlashcardInput!]!
}

input CreateItemInput {
  associatedBloomLevels: [BloomLevel!]!
  associatedSkills: [CreateSkillInput!]!
}

input CreateMediaContentInput {
  metadata: CreateContentMetadataInput!
}

input CreateMediaRecordInput {
  contentIds: [UUID!]!
  name: String!
  type: MediaType!
}

input CreateMultipleChoiceQuestionInput {
  answers: [MultipleChoiceAnswerInput!]!
  hint: JSON
  itemId: UUID!
  number: Int
  text: JSON!
}

input CreateMultipleChoiceQuestionInputWithoutItem {
  answers: [MultipleChoiceAnswerInput!]!
  hint: JSON
  number: Int
  text: JSON!
}

input CreateNumericQuestionInput {
  correctAnswer: Float!
  feedback: JSON
  hint: JSON
  itemId: UUID!
  number: Int
  text: JSON!
  tolerance: Float!
}

input CreateNumericQuestionInputWithoutItem {
  correctAnswer: Float!
  feedback: JSON
  hint: JSON
  number: Int
  text: JSON!
  tolerance: Float!
}

input CreateQuizInput {
  numberOfRandomlySelectedQuestions: Int
  questionPoolingMode: QuestionPoolingMode!
  requiredCorrectAnswers: Int!
}

input CreateSectionInput {
  chapterId: UUID!
  name: String!
}

input CreateSelfAssessmentQuestionInput {
  hint: JSON
  itemId: UUID!
  number: Int
  solutionSuggestion: JSON!
  text: JSON!
}

input CreateSelfAssessmentQuestionInputWithoutItem {
  hint: JSON
  number: Int
  solutionSuggestion: JSON!
  text: JSON!
}

input CreateSkillInput {
  isCustomSkill: Boolean
  skillCategory: String!
  skillName: String!
}

input CreateStageInput {
  optionalContents: [UUID!]!
  requiredContents: [UUID!]!
}

input CreateSubexerciseInput {
  itemId: UUID!
  number: String
  parentExerciseId: UUID!
  totalSubexerciseCredits: Float!
}

scalar Date

scalar DateTime

input DateTimeFilter {
  after: DateTime
  before: DateTime
}

directive @DecimalMax(value: String!, inclusive: Boolean! = true, message: String = "graphql.validation.DecimalMax.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @DecimalMin(value: String!, inclusive: Boolean! = true, message: String = "graphql.validation.DecimalMin.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @defer(if: Boolean! = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type DocumentRecordSegment implements MediaRecordSegment {
  id: UUID!
  mediaRecord: MediaRecord!
  mediaRecordId: UUID!
  page: Int!
  text: String!
  thumbnail: String!
  title: String
}

type DocumentSource implements Source {
  mediaRecordId: UUID!
  mediaRecords: [MediaRecord!]!
  page: Int!
}

type ExactAnswerQuestion implements Question {
  aiGenerated: Boolean!
  caseSensitive: Boolean!
  correctAnswers: [String!]!
  feedback: JSON
  hint: JSON
  item: Item!
  itemId: UUID!
  number: Int!
  text: JSON!
  type: QuestionType!
}

type Exercise {
  itemId: UUID!
  number: String
  subexercises: [Subexercise!]!
  totalExerciseCredits: Float!
  tutorFeedback: String
}

input ExerciseCompletedInput {
  achievedCredits: Float!
  completedSubexercises: [SubexerciseCompletedInput]!
  itemId: UUID!
}

type ExerciseGrading {
  achievedCredits: Float!
  itemId: UUID!
  studentId: UUID!
  subexerciseGradings: [SubexerciseGrading]!
}

directive @experimental_disableErrorPropagation on QUERY | MUTATION | SUBSCRIPTION

type ExternalAssignment {
  externalId: String!
  sheetNo: Float!
}

type ExternalCourse {
  courseTitle: String!
  url: String!
}

enum ExternalServiceProviderDto {
  GITHUB
}

type ExternalUserIdWithUser {
  externalUserId: String!
  userId: UUID!
}

type Flashcard {
  item: Item!
  itemId: UUID!
  sides: [FlashcardSide!]!
  userProgressData: FlashcardProgressData!
}

type FlashcardLearnedFeedback {
  flashcardSetProgress: FlashcardSetProgress!
  nextLearnDate: DateTime!
  success: Boolean!
}

type FlashcardOutput {
  flashcard: Flashcard!
}

type FlashcardProgressData {
  lastLearned: DateTime
  learningInterval: Int
  nextLearn: DateTime
}

type FlashcardProgressDataLog {
  id: UUID
  learnedAt: DateTime!
  success: Boolean!
}

type FlashcardSet {
  assessmentId: UUID!
  content: Content
  courseId: UUID!
  flashcards: [Flashcard!]!
}

type FlashcardSetAssessment implements Assessment & Content {
  aiProcessingProgress: AiEntityProcessingProgress!
  assessmentMetadata: AssessmentMetadata!
  flashcardSet: FlashcardSet
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  items: [Item!]!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  suggestedTags: [String!]!
  userProgressData: UserProgressData!
}

type FlashcardSetMutation {
  assessmentId: UUID!
  createFlashcard(assessmentId: UUID!, flashcardInput: CreateFlashcardInputWithoutItem!, item: CreateItemInput!): FlashcardOutput!
  deleteFlashcard(id: UUID!): UUID!
  updateFlashcard(assessmentId: UUID!, flashcardInput: UpdateFlashcardInput!, item: ItemInput!): FlashcardOutput!
}

type FlashcardSetProgress {
  correctness: Float!
  percentageLearned: Float!
}

type FlashcardSide {
  isAnswer: Boolean!
  isQuestion: Boolean!
  label: String!
  text: JSON!
}

input FlashcardSideInput {
  isAnswer: Boolean!
  isQuestion: Boolean!
  label: String!
  text: JSON!
}

type Forum {
  courseId: UUID!
  id: UUID!
  threads: [Thread!]!
  userIds: [UUID!]!
}

type ForumActivityEntry {
  courseId: UUID
  creationTime: DateTime!
  post: Post
  thread: Thread!
}

enum Gamification {
  ADAPTIVE_GAMIFICATION_ENABLED
  ALL_GAMIFICATION_DISABLED
  GAMIFICATION_ENABLED
}

input GenerateAccessTokenInput {
  authorizationCode: String!
  provider: ExternalServiceProviderDto!
}

input GenerateMediaRecordLinksInput {
  contentId: UUID!
}

enum GlobalUserRole {
  COURSE_CREATOR
  SUPER_USER
}

type Grading {
  achievedCredits: Float
  assessmentId: UUID!
  codeAssignmentGradingMetadata: CodeAssignmentGradingMetadata
  date: DateTime
  exerciseGradings: [ExerciseGrading!]
  student: PublicUserInfo
  studentId: UUID!
}

interface HasGoal {
  courseId: UUID!
  userId: UUID
}

type HintResponse {
  hint: String!
}

type InfoThread implements Thread {
  creationTime: DateTime!
  creatorId: UUID!
  id: UUID!
  info: Post!
  numberOfPosts: Int!
  posts: [Post!]!
  threadContentReference: ThreadContentReference
  title: String!
}

input IngestMediaRecordInput {
  id: UUID!
}

input InputForum {
  courseId: UUID!
  id: UUID!
}

input InputInfoThread {
  forumId: UUID!
  info: InputPost!
  threadContentReference: InputThreadContentReferenceOnCreate
  title: String!
}

input InputPost {
  content: String!
  id: UUID
  threadId: UUID
}

input InputQuestionThread {
  answer: InputPost
  forumId: UUID!
  question: InputPost!
  threadContentReference: InputThreadContentReferenceOnCreate
  title: String!
}

input InputThreadContentReference {
  contentId: UUID!
  pageNumber: Int
  threadId: UUID!
  timeStampSeconds: Int
}

input InputThreadContentReferenceOnCreate {
  contentId: UUID!
  pageNumber: Int
  timeStampSeconds: Int
}

input IntFilter {
  equals: Int
  greaterThan: Int
  lessThan: Int
}

type Inventory {
  items: [UserItem!]!
  unspentPoints: Int!
  userId: UUID!
}

type Item {
  associatedBloomLevels: [BloomLevel!]!
  associatedSkills: [Skill!]!
  id: UUID!
}

input ItemInput {
  associatedBloomLevels: [BloomLevel!]!
  associatedSkills: [SkillInput!]!
  id: UUID
}

type ItemProgress {
  itemId: UUID!
  responseCorrectness: Float!
}

scalar JSON

type LectureQuestionResponse {
  answer: String!
  sources: [Source!]!
}

scalar LocalTime

input LogAssignmentCompletedInput {
  achievedCredits: Float!
  assessmentId: UUID!
  completedExercises: [ExerciseCompletedInput]!
}

input LogFlashcardLearnedInput {
  flashcardId: UUID!
  successful: Boolean!
}

input LogFlashcardSetLearnedInput {
  flashcardSetId: UUID!
  percentageSuccess: Float!
  userId: UUID!
}

type ManualMappingInstance {
  externalStudentId: String!
  externalStudentInfo: String!
}

directive @Max(value: Int! = 2147483647, message: String = "graphql.validation.Max.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type MediaContent implements Content {
  aiProcessingProgress: AiEntityProcessingProgress!
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  mediaRecords: [MediaRecord!]!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  segmentLinks: [MediaRecordSegmentLink!]!
  userProgressData: UserProgressData!
}

type MediaRecord {
  aiProcessingProgress: AiEntityProcessingProgress!
  closedCaptions: String
  contentIds: [UUID!]!
  contents: [Content]!
  courseIds: [UUID!]!
  creatorId: UUID!
  downloadUrl: String!
  id: UUID!
  internalDownloadUrl: String!
  internalUploadUrl: String!
  name: String!
  segments: [MediaRecordSegment!]!
  standardizedDownloadUrl: String
  suggestedTags: [String!]!
  summary: [String!]!
  type: MediaType!
  uploadUrl: String!
  userProgressData: MediaRecordProgressData!
}

type MediaRecordProgressData {
  dateWorkedOn: DateTime
  workedOn: Boolean!
}

interface MediaRecordSegment {
  id: UUID!
  mediaRecordId: UUID!
  thumbnail: String!
  title: String
}

type MediaRecordSegmentLink {
  segment1: MediaRecordSegment!
  segment2: MediaRecordSegment!
}

type MediaRecordSegmentSemanticSearchResult implements SemanticSearchResult {
  mediaRecordSegment: MediaRecordSegment!
  score: Float!
}

enum MediaType {
  AUDIO
  DOCUMENT
  IMAGE
  PRESENTATION
  URL
  VIDEO
}

directive @Min(value: Int! = 0, message: String = "graphql.validation.Min.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type MultipleChoiceAnswer {
  answerText: JSON!
  correct: Boolean!
  feedback: JSON
}

input MultipleChoiceAnswerInput {
  answerText: JSON!
  correct: Boolean!
  feedback: JSON
}

type MultipleChoiceQuestion implements Question {
  aiGenerated: Boolean!
  answers: [MultipleChoiceAnswer!]!
  hint: JSON
  item: Item!
  itemId: UUID!
  number: Int!
  numberOfCorrectAnswers: Int!
  text: JSON!
  type: QuestionType!
}

type Mutation {
  addPost(post: InputPost!): Post
  addThreadToContent(threadContentReference: InputThreadContentReference!): ThreadContentReference
  addUserToForum(forumId: UUID!): Forum
  addUserToForumCourse(courseId: UUID!): Forum
  buyItem(itemId: UUID!): Inventory
  createAssignmentAssessment(assessmentInput: CreateAssessmentInput!, assignmentInput: CreateAssignmentInput!): AssignmentAssessment!
  createChapter(input: CreateChapterInput!): Chapter!
  createCourse(input: CreateCourseInput!): Course!
  createFlashcardSetAssessment(assessmentInput: CreateAssessmentInput!, flashcardSetInput: CreateFlashcardSetInput!): FlashcardSetAssessment
  createForum(courseId: UUID!): Forum
  createInfoThread(thread: InputInfoThread!): InfoThread
  createMediaContentAndLinkRecords(contentInput: CreateMediaContentInput!, mediaRecordIds: [UUID!]!): MediaContent!
  createMediaRecord(input: CreateMediaRecordInput!): MediaRecord!
  createMembership(input: CourseMembershipInput!): CourseMembership!
  createQuestionThread(thread: InputQuestionThread!): QuestionThread
  createQuizAssessment(assessmentInput: CreateAssessmentInput!, quizInput: CreateQuizInput!): QuizAssessment!
  createSection(input: CreateSectionInput!): Section!
  defaultSettings(userId: UUID!): Settings!
  deleteChapter(id: UUID!): UUID!
  deleteCourse(id: UUID!): UUID!
  deleteFlashcardSet(assessmentId: UUID!): UUID! @deprecated(reason: "Only use if you specifically only want to delete the flashcard set and not the whole assessment. Otherwise, use deleteAssessment in contents service instead.")
  deleteMediaRecord(id: UUID!): UUID!
  deleteMembership(input: CourseMembershipInput!): CourseMembership!
  deletePost(postId: UUID!): Post
  deleteQuiz(assessmentId: UUID!): UUID! @deprecated(reason: "Only use if you specifically only want to delete the quiz and not the whole assessment. Otherwise, use deleteAssessment in contents service instead.")
  deleteThread(threadId: UUID!): Thread
  downvotePost(postId: UUID!): Post
  evaluatePlayerHexadScore(input: PlayerAnswerInput!, userId: UUID!): PlayerHexadScore!
  generateAccessToken(input: GenerateAccessTokenInput!): Boolean!
  generateHint(courseId: UUID!, questionText: String!): HintResponse!
  joinCourse(courseId: UUID!): CourseMembership!
  leaveCourse(courseId: UUID!): CourseMembership!
  logAssignmentCompleted(input: LogAssignmentCompletedInput!): AssignmentCompletedFeedback!
  logFlashcardLearned(input: LogFlashcardLearnedInput!): FlashcardLearnedFeedback!
  loginUser(courseId: UUID): UUID
  logMediaRecordWorkedOn(mediaRecordId: UUID!): MediaRecord!
  logQuizCompleted(input: QuizCompletedInput!): QuizCompletionFeedback!
  mutateAssignment(assessmentId: UUID!): AssignmentMutation!
  mutateContent(contentId: UUID!): ContentMutation!
  mutateFlashcardSet(assessmentId: UUID!): FlashcardSetMutation!
  mutateQuiz(assessmentId: UUID!): QuizMutation!
  mutateSection(sectionId: UUID!): SectionMutation!
  recalculateLevels(chapterId: UUID!, userId: UUID!): SkillLevels! @deprecated(reason: "Only for testing purposes. Will be removed.")
  recalculateScores(courseId: UUID!, userId: UUID!): RewardScores! @deprecated(reason: "Only for testing purposes. Will be removed.")
  saveStudentMappings(courseId: UUID!, studentMappingInputs: [StudentMappingInput!]!): [String]!
  selectAnswer(postId: UUID!): QuestionThread!
  sendMessage(courseId: UUID, userInput: String!): LectureQuestionResponse!
  setLinkedMediaRecordsForContent(contentId: UUID!, mediaRecordIds: [UUID!]!): [MediaRecord!]!
  setMediaRecordsForCourse(courseId: UUID!, mediaRecordIds: [UUID!]!): [MediaRecord!]!
  setNickname(nickname: String!): UserInfo!
  syncAssignmentsForCourse(courseId: UUID!): Boolean!
  updateAssignment(assessmentId: UUID!, input: UpdateAssignmentInput!): Assignment!
  updateChapter(input: UpdateChapterInput!): Chapter!
  updateCourse(input: UpdateCourseInput!): Course!
  updateMediaRecord(input: UpdateMediaRecordInput!): MediaRecord!
  updateMembership(input: CourseMembershipInput!): CourseMembership!
  updatePost(post: InputPost!): Post
  updateSettings(input: SettingsInput!, userId: UUID!): Settings!
  upvotePost(postId: UUID!): Post
}

directive @Negative(message: String = "graphql.validation.Negative.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NegativeOrZero(message: String = "graphql.validation.NegativeOrZero.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotBlank(message: String = "graphql.validation.NotBlank.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotEmpty(message: String = "graphql.validation.NotEmpty.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type Notification {
  gamification: Boolean
  lecture: Boolean
}

input NotificationInput {
  gamification: Boolean
  lecture: Boolean
}

type NumericQuestion implements Question {
  aiGenerated: Boolean!
  correctAnswer: Float!
  feedback: JSON
  hint: JSON
  item: Item!
  itemId: UUID!
  number: Int!
  text: JSON!
  tolerance: Float!
  type: QuestionType!
}

directive @OnDemand on FIELD_DEFINITION

directive @oneOf on INPUT_OBJECT

input Pagination {
  page: Int! = 0
  size: Int!
}

type PaginationInfo {
  hasNext: Boolean!
  page: Int!
  size: Int!
  totalElements: Int!
  totalPages: Int!
}

directive @Pattern(regexp: String! = ".*", message: String = "graphql.validation.Pattern.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

input PlayerAnswerInput {
  questions: [QuestionInput!]!
}

type PlayerHexadScore {
  scores: [PlayerTypeScore!]!
}

enum PlayerType {
  ACHIEVER
  DISRUPTOR
  FREE_SPIRIT
  PHILANTHROPIST
  PLAYER
  SOCIALISER
}

type PlayerTypeScore {
  type: PlayerType!
  value: Float!
}

directive @Positive(message: String = "graphql.validation.Positive.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @PositiveOrZero(message: String = "graphql.validation.PositiveOrZero.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type Post {
  authorId: UUID!
  content: String!
  creationTime: DateTime!
  downvotedByUsers: [UUID]!
  edited: Boolean!
  id: UUID!
  upvotedByUsers: [UUID]!
}

type ProgressLogItem {
  correctness: Float!
  hintsUsed: Int!
  progressPerItem: ItemProgress!
  success: Boolean!
  timestamp: DateTime!
  timeToComplete: Int
}

type PublicUserInfo {
  id: UUID!
  userName: String!
}

type Query {
  _empty: String
  achievementsByCourseId(courseId: UUID!): [Achievement!]!
  achievementsByUserId(userId: UUID): [Achievement!]!
  contentsByChapterIds(chapterIds: [UUID!]!): [[Content!]!]!
  contentsByCourseIds(courseIds: [UUID!]!): [[Content!]!]
  contentsByIds(ids: [UUID!]!): [Content!]!
  courseRewardScoresForUser(courseId: UUID!, userId: UUID!): RewardScores!
  courses(filter: CourseFilter, pagination: Pagination, sortBy: [String!], sortDirection: [SortDirection!]! = [ASC]): CoursePayload!
  coursesByIds(ids: [UUID!]!): [Course!]!
  currentUserInfo: UserInfo!
  dueFlashcardsByCourseId(courseId: UUID!): [Flashcard!]!
  findAssignmentsByAssessmentIds(assessmentIds: [UUID!]!): [Assignment]!
  findContentsByIds(ids: [UUID!]!): [Content]!
  findFlashcardSetsByAssessmentIds(assessmentIds: [UUID!]!): [FlashcardSet]!
  findMediaRecordsByIds(ids: [UUID!]!): [MediaRecord]!
  findPublicUserInfos(ids: [UUID!]!): [PublicUserInfo]!
  findQuizzesByAssessmentIds(assessmentIds: [UUID!]!): [Quiz]!
  findUserInfos(ids: [UUID!]!): [UserInfo]!
  findUserSettings(userId: UUID): Settings!
  findUsersSettings(usersIds: [UUID]!): [Settings]!
  flashcardsByIds(itemIds: [UUID!]!): [Flashcard!]!
  forum(id: UUID!): Forum
  forumActivity(id: UUID!): [ForumActivityEntry!]!
  forumActivityByUserId: [ForumActivityEntry!]!
  forumByCourseId(id: UUID!): Forum
  getExternalAssignments(courseId: UUID!): [ExternalAssignment!]!
  getExternalCodeAssignments(courseId: UUID!): [String!]!
  getExternalCourse(courseId: UUID!): ExternalCourse
  getGradingsForAssignment(assessmentId: UUID!): [Grading!]!
  getManualMappingInstances(courseId: UUID!): [ManualMappingInstance]!
  getPlayerHexadScoreById(userId: UUID!): PlayerHexadScore!
  getSemanticallySimilarEntities(count: Int! = 10, courseWhitelist: [UUID!], excludeEntitiesWithSameParent: Boolean, segmentId: UUID!): [SemanticSearchResult!]!
  inventoryForUser: Inventory!
  isAccessTokenAvailable(provider: ExternalServiceProviderDto!): Boolean!
  itemsByUserId(userId: UUID!): [UserItem!]!
  mediaRecords: [MediaRecord!]! @deprecated(reason: "In production there should probably be no way to get all media records of the system.")
  mediaRecordsByContentIds(contentIds: [UUID!]!): [[MediaRecord!]!]!
  mediaRecordsByIds(ids: [UUID!]!): [MediaRecord!]!
  mediaRecordsForCourses(courseIds: [UUID!]!): [[MediaRecord!]!]!
  mediaRecordsForUsers(userIds: [UUID!]!): [[MediaRecord!]!]!
  openQuestionByCourseId(id: UUID!): [Thread!]!
  otherUserForumActivityByUserId(otherUserId: UUID!): [ForumActivityEntry!]!
  PlayerHexadScoreExists(userId: UUID!): Boolean!
  scoreboard(courseId: UUID!): [ScoreboardItem!]!
  semanticSearch(count: Int! = 10, courseWhitelist: [UUID!], queryText: String!): [SemanticSearchResult!]!
  suggestionsByChapterIds(amount: Int!, chapterIds: [UUID!]!, skillTypes: [SkillType!]! = []): [Suggestion!]!
  thread(id: UUID!): Thread
  threadsByContentId(id: UUID!): [Thread!]!
  userCourseRewardScores(courseId: UUID!): RewardScores!
  userMediaRecords: [MediaRecord!]!
}

interface Question {
  aiGenerated: Boolean!
  hint: JSON
  itemId: UUID!
  number: Int!
  type: QuestionType!
}

input QuestionCompletedInput {
  correct: Boolean!
  questionId: UUID!
  usedHint: Boolean!
}

input QuestionInput {
  possibleAnswers: [AnswerInput!]!
  selectedAnswer: AnswerInput!
  text: String!
}

enum QuestionPoolingMode {
  ORDERED
  RANDOM
}

type QuestionThread implements Thread {
  creationTime: DateTime!
  creatorId: UUID!
  id: UUID!
  numberOfPosts: Int!
  posts: [Post!]!
  question: Post!
  selectedAnswer: Post
  threadContentReference: ThreadContentReference
  title: String!
}

enum QuestionType {
  ASSOCIATION
  CLOZE
  EXACT_ANSWER
  MULTIPLE_CHOICE
  NUMERIC
  SELF_ASSESSMENT
}

type Quiz {
  assessmentId: UUID!
  content: Content
  courseId: UUID!
  numberOfRandomlySelectedQuestions: Int
  questionPool: [Question!]!
  questionPoolingMode: QuestionPoolingMode!
  requiredCorrectAnswers: Int!
  selectedQuestions: [Question!]!
}

type QuizAIGenAsyncResponse {
  quiz: Quiz
}

type QuizAssessment implements Assessment & Content {
  aiProcessingProgress: AiEntityProcessingProgress!
  assessmentMetadata: AssessmentMetadata!
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  items: [Item!]!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  quiz: Quiz
  suggestedTags: [String!]!
  userProgressData: UserProgressData!
}

input QuizCompletedInput {
  completedQuestions: [QuestionCompletedInput!]!
  quizId: UUID!
}

type QuizCompletionFeedback {
  correctness: Float!
  hintsUsed: Int!
  success: Boolean!
}

type QuizMutation {
  addAssociationQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateAssociationQuestionInputWithoutItem!): QuizOutput!
  addClozeQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateClozeQuestionInputWithoutItem!): QuizOutput!
  addExactAnswerQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateExactAnswerQuestionInputWithoutItem!): QuizOutput!
  addMultipleChoiceQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateMultipleChoiceQuestionInputWithoutItem!): QuizOutput!
  addNumericQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateNumericQuestionInputWithoutItem!): QuizOutput!
  addSelfAssessmentQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateSelfAssessmentQuestionInputWithoutItem!): QuizOutput!
  aiGenerateQuestionAsync(context: AiGenQuestionContext): QuizAIGenAsyncResponse
  assessmentId: UUID!
  removeQuestion(number: Int!): Quiz!
  setNumberOfRandomlySelectedQuestions(numberOfRandomlySelectedQuestions: Int!): Quiz!
  setQuestionPoolingMode(questionPoolingMode: QuestionPoolingMode!): Quiz!
  setRequiredCorrectAnswers(requiredCorrectAnswers: Int!): Quiz!
  switchQuestions(firstNumber: Int!, secondNumber: Int!): Quiz!
  updateAssociationQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateAssociationQuestionInput!): QuizOutput!
  updateClozeQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateClozeQuestionInput!): QuizOutput!
  updateExactAnswerQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateExactAnswerQuestionInput!): QuizOutput!
  updateMultipleChoiceQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateMultipleChoiceQuestionInput!): QuizOutput!
  updateNumericQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateNumericQuestionInput!): QuizOutput!
  updateSelfAssessmentQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateSelfAssessmentQuestionInput!): QuizOutput!
}

type QuizOutput {
  assessmentId: UUID!
  modifiedQuestion: Question!
  questionPool: [Question!]!
}

directive @Range(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.Range.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @resolveTo(requiredSelectionSet: String, sourceName: String, sourceTypeName: String, sourceFieldName: String, sourceSelectionSet: String, sourceArgs: ResolveToSourceArgs, keyField: String, keysArg: String, pubsubTopic: String, filterBy: String, additionalArgs: ResolveToSourceArgs, result: String, resultType: String) on FIELD_DEFINITION

scalar ResolveToSourceArgs

enum RewardChangeReason {
  COMPOSITE_VALUE
  CONTENT_DONE
  CONTENT_DUE_FOR_LEARNING
  CONTENT_DUE_FOR_REPETITION
  CONTENT_REVIEWED
}

type RewardLogItem {
  associatedContentIds: [UUID!]!
  associatedContents: [Content]!
  date: DateTime!
  difference: Int!
  newValue: Int!
  oldValue: Int!
  reason: RewardChangeReason!
}

type RewardScore {
  log: [RewardLogItem!]!
  percentage: Float!
  value: Int!
}

type RewardScores {
  fitness: RewardScore!
  growth: RewardScore!
  health: RewardScore!
  power: RewardScore!
  strength: RewardScore!
}

type ScoreboardItem {
  powerScore: Int!
  user: PublicUserInfo
  userId: UUID!
}

type Section {
  chapter: Chapter!
  chapterId: UUID!
  courseId: UUID!
  id: UUID!
  name: String!
  stages: [Stage!]!
}

type SectionMutation {
  createStage(input: CreateStageInput): Stage!
  deleteSection: UUID!
  deleteStage(id: UUID!): UUID!
  sectionId: UUID!
  updateSectionName(name: String!): Section!
  updateStage(input: UpdateStageInput): Stage!
  updateStageOrder(stages: [UUID!]!): Section!
}

type SelfAssessmentQuestion implements Question {
  aiGenerated: Boolean!
  hint: JSON
  itemId: UUID!
  number: Int!
  solutionSuggestion: JSON!
  text: JSON!
  type: QuestionType!
}

interface SemanticSearchResult {
  score: Float!
}

type Settings {
  gamification: Gamification
  notification: Notification
}

input SettingsInput {
  gamification: Gamification
  notification: NotificationInput
}

type SingleAssociation {
  feedback: JSON
  left: JSON!
  right: JSON!
}

directive @Size(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.Size.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type Skill {
  id: UUID!
  isCustomSkill: Boolean!
  skillCategory: String!
  skillLevels: SkillLevels
  skillName: String!
}

input SkillInput {
  id: UUID
  isCustomSkill: Boolean!
  skillCategory: String!
  skillName: String!
}

type SkillLevel {
  log: [SkillLevelLogItem!]!
  value: Float!
}

type SkillLevelLogItem {
  associatedContents: [Content]!
  associatedItemId: UUID!
  date: DateTime!
  difference: Float!
  newValue: Float!
  oldValue: Float!
  predictedCorrectness: Float!
  userResponse: Float!
}

type SkillLevels {
  analyze: SkillLevel
  apply: SkillLevel
  create: SkillLevel
  evaluate: SkillLevel
  remember: SkillLevel
  understand: SkillLevel
}

enum SkillType {
  ANALYZE
  APPLY
  CREATE
  EVALUATE
  REMEMBER
  UNDERSTAND
}

enum SortDirection {
  ASC
  DESC
}

interface Source {
  mediaRecordId: UUID!
}

directive @specifiedBy(url: String!) on SCALAR

type Stage {
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  optionalContents: [Content!]!
  optionalContentsProgress: Float!
  position: Int!
  requiredContents: [Content!]!
  requiredContentsProgress: Float!
}

input StringFilter {
  contains: String
  equals: String
  ignoreCase: Boolean! = false
}

type StudentMapping {
  externalStudentId: String!
  meitrexStudentId: UUID!
}

input StudentMappingInput {
  externalStudentId: String!
  meitrexStudentId: UUID!
}

type Subexercise {
  itemId: UUID!
  number: String
  totalSubexerciseCredits: Float!
  tutorFeedback: String
}

input SubexerciseCompletedInput {
  achievedCredits: Float!
  itemId: UUID!
}

type SubexerciseGrading {
  achievedCredits: Float!
  itemId: UUID!
  studentId: UUID!
}

type Suggestion {
  content: Content!
  type: SuggestionType!
}

enum SuggestionType {
  NEW_CONTENT
  REPETITION
}

interface Thread {
  creationTime: DateTime
  creatorId: UUID!
  id: UUID!
  numberOfPosts: Int!
  posts: [Post!]!
  threadContentReference: ThreadContentReference
  title: String!
}

type ThreadContentReference {
  contentId: UUID!
  pageNumber: Int
  threadId: UUID!
  timeStampSeconds: Int
}

scalar Time

type UnfinishedGrading {
  assignmentId: UUID!
  externalStudentId: String!
  gradingJson: String!
  numberOfTries: Int!
}

input UpdateAssessmentInput {
  assessmentMetadata: AssessmentMetadataInput!
  items: [ItemInput!]
  metadata: UpdateContentMetadataInput!
}

input UpdateAssignmentInput {
  requiredPercentage: Float
}

input UpdateAssociationQuestionInput {
  correctAssociations: [AssociationInput!]!
  hint: JSON
  itemId: UUID!
  text: JSON!
}

input UpdateChapterInput {
  description: String!
  endDate: DateTime!
  id: UUID!
  number: Int!
  startDate: DateTime!
  suggestedEndDate: DateTime
  suggestedStartDate: DateTime
  title: String!
}

input UpdateClozeQuestionInput {
  additionalWrongAnswers: [String!]!
  clozeElements: [ClozeElementInput!]!
  hint: JSON
  itemId: UUID!
  showBlanksList: Boolean! = true
}

input UpdateContentMetadataInput {
  chapterId: UUID!
  name: String!
  rewardPoints: Int!
  suggestedDate: DateTime!
  tagNames: [String!]! = []
}

input UpdateCourseInput {
  description: String!
  endDate: DateTime!
  id: UUID!
  published: Boolean!
  startDate: DateTime!
  startYear: Int
  title: String!
  yearDivision: YearDivision
}

input UpdateExactAnswerQuestionInput {
  caseSensitive: Boolean! = false
  correctAnswers: [String!]!
  feedback: JSON
  hint: JSON
  itemId: UUID!
  text: JSON!
}

input UpdateExerciseInput {
  itemId: UUID!
  number: String
  subexercises: [CreateSubexerciseInput!]!
  totalExerciseCredits: Float!
}

input UpdateFlashcardInput {
  itemId: UUID!
  sides: [FlashcardSideInput!]!
}

input UpdateMediaContentInput {
  metadata: UpdateContentMetadataInput!
}

input UpdateMediaRecordInput {
  contentIds: [UUID!]!
  id: UUID!
  name: String!
  type: MediaType!
}

input UpdateMultipleChoiceQuestionInput {
  answers: [MultipleChoiceAnswerInput!]!
  hint: JSON
  itemId: UUID!
  text: JSON!
}

input UpdateNumericQuestionInput {
  correctAnswer: Float!
  feedback: JSON
  hint: JSON
  itemId: UUID!
  text: JSON!
  tolerance: Float!
}

input UpdateSelfAssessmentQuestionInput {
  hint: JSON
  itemId: UUID!
  solutionSuggestion: JSON!
  text: JSON!
}

input UpdateStageInput {
  id: UUID!
  optionalContents: [UUID!]!
  requiredContents: [UUID!]!
}

input UpdateSubexerciseInput {
  itemId: UUID!
  number: String
  totalSubexerciseCredits: Float!
}

scalar Url

type UserInfo {
  availableCourseMemberships: [CourseMembership!]!
  courseMemberships: [CourseMembership!]!
  firstName: String!
  id: UUID!
  lastName: String!
  mediaRecords: [MediaRecord!]!
  nickname: String!
  realmRoles: [GlobalUserRole!]!
  unavailableCourseMemberships: [CourseMembership!]!
  userName: String!
}

type UserItem {
  equipped: Boolean!
  id: UUID!
  uniqueDescription: String!
  unlocked: Boolean!
}

type UserProgressData {
  contentId: UUID!
  isDueForReview: Boolean!
  isLearned: Boolean!
  lastLearnDate: DateTime
  learningInterval: Int
  log: [ProgressLogItem]!
  nextLearnDate: DateTime
  userId: UUID!
}

enum UserRoleInCourse {
  ADMINISTRATOR
  STUDENT
  TUTOR
}

scalar UUID

type VideoRecordSegment implements MediaRecordSegment {
  id: UUID!
  mediaRecord: MediaRecord!
  mediaRecordId: UUID!
  screenText: String!
  startTime: Int!
  thumbnail: String!
  title: String
  transcript: String!
}

type VideoSource implements Source {
  mediaRecordId: UUID!
  mediaRecords: [MediaRecord!]!
  startTime: Float!
}

enum YearDivision {
  FIRST_QUARTER
  FIRST_SEMESTER
  FIRST_TRIMESTER
  FOURTH_QUARTER
  SECOND_QUARTER
  SECOND_SEMESTER
  SECOND_TRIMESTER
  THIRD_QUARTER
  THIRD_TRIMESTER
}
