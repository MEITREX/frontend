# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
  # The URL that specifies the behaviour of this scalar.
  url: String!
) on SCALAR

#  see also https://github.com/graphql-java/graphql-java-extended-validation/blob/master/README.md
directive @DecimalMax(value: String!, inclusive: Boolean! = true, message: String = "graphql.validation.DecimalMax.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @DecimalMin(value: String!, inclusive: Boolean! = true, message: String = "graphql.validation.DecimalMin.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Max(value: Int! = 2147483647, message: String = "graphql.validation.Max.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Min(value: Int! = 0, message: String = "graphql.validation.Min.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Negative(message: String = "graphql.validation.Negative.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NegativeOrZero(message: String = "graphql.validation.NegativeOrZero.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotBlank(message: String = "graphql.validation.NotBlank.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotEmpty(message: String = "graphql.validation.NotEmpty.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @ContainerNotEmpty(message: String = "graphql.validation.ContainerNotEmpty.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Pattern(regexp: String! = ".*", message: String = "graphql.validation.Pattern.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Positive(message: String = "graphql.validation.Positive.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @PositiveOrZero(message: String = "graphql.validation.PositiveOrZero.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Range(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.Range.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Size(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.Size.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @ContainerSize(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.ContainerSize.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

#
# The @OnDemand directive is used to mark fields that are only internally resolved when requested.
# Implementation Note: This will cause the code generator to omit the field from the generated DTOs.
directive @OnDemand on FIELD_DEFINITION

# Indicates an Input Object is a OneOf Input Object.
directive @oneOf on INPUT_OBJECT

# This directive allows results to be deferred during execution
directive @defer(
  # Deferred behaviour is controlled by this argument
  if: Boolean! = true

  # A unique label that represents the fragment being deferred
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

# This directive disables error propagation when a non nullable field returns null for the given operation.
directive @experimental_disableErrorPropagation on QUERY | MUTATION | SUBSCRIPTION

directive @resolveTo(requiredSelectionSet: String, sourceName: String!, sourceTypeName: String!, sourceFieldName: String!, sourceSelectionSet: String, sourceArgs: ResolveToSourceArgs, keyField: String, keysArg: String, pubsubTopic: String, filterBy: String, additionalArgs: ResolveToSourceArgs, result: String, resultType: String) on FIELD_DEFINITION

type AccessToken {
  accessToken: String!
  externalUserId: String
}

type AiEntityProcessingProgress {
  entityId: UUID!
  queuePosition: Int
  state: AiEntityProcessingState!
}

enum AiEntityProcessingState {
  DONE
  ENQUEUED
  PROCESSING
  UNKNOWN
}

input AnswerInput {
  playerTypes: [PlayerType!]!
  text: String!
}

interface Assessment {
  assessmentMetadata: AssessmentMetadata!
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  items: [Item!]!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  userProgressData: UserProgressData!
}

type AssessmentContentReference {
  assessmentId: UUID!
}

type AssessmentMetadata {
  initialLearningInterval: Int
  skillPoints: Int!
  skillTypes: [SkillType!]!
}

input AssessmentMetadataInput {
  initialLearningInterval: Int
  skillPoints: Int!
  skillTypes: [SkillType!]!
}

type AssessmentSemanticSearchResult implements SemanticSearchResult {
  # The similarity score of the search result.
  score: Float!

  # ID of the assessment this search result is referencing.
  assessmentId: UUID!

  # The assessment this search result is referencing.
  assessment: Assessment!
}

#
# An assignment is an external source of tasks, which can be imported. This includes exercise sheets and physical tests.
type Assignment {
  #
  # Identifier of the assignment, same as the identifier of the assessment.
  assessmentId: UUID!

  #
  # Id of the course this assignment belongs to.
  courseId: UUID!

  #
  # List of exercises making up the assignment.
  # Optional for CODE_ASSIGNMENT since GH Classroom does not provide exercises.
  exercises: [Exercise!]

  #
  # The date at which the assignment had to be handed in (optional).
  date: DateTime

  #
  # Number of total credits in the assignment.
  totalCredits: Float

  #
  # Type of the assignment, e.g. exercise sheet or physical test.
  assignmentType: AssignmentType!

  #
  # Description of the assignment (optional).
  description: String

  #
  # The required percentage to pass the assignment. A value between 0 and 1. Defaults to 0.5. (optional)
  requiredPercentage: Float

  #
  # The id of the exercise sheet in an external system like TMS. (optional)
  # This is needed for mapping grading data to assignments.
  externalId: String

  #
  # CodeAssignmentMetadata contains metadata for the external code assignment.
  codeAssignmentMetadata: CodeAssignmentMetadata

  # The content this assignment belongs to.
  content: Content
}

#
# An assignment, assignment related fields are stored in the assignment service.
type AssignmentAssessment implements Assessment & Content {
  #
  # Assessment metadata
  assessmentMetadata: AssessmentMetadata!

  #
  # ID of the content
  id: UUID!

  #
  # Metadata of the content
  metadata: ContentMetadata!

  #
  # Progress data of the content for the current user.
  userProgressData: UserProgressData!

  #
  # Progress data of the specified user.
  progressDataForUser(userId: UUID!): UserProgressData!

  #
  # the items that belong to the Assignment
  items: [Item!]!

  #
  # For the current user, returns true if this content could be worked on by the user (i.e. it is not locked), false
  # if content is not available to be worked on (e.g. because previous stage has not been completed)
  isAvailableToBeWorkedOn: Boolean!

  # The assignment of the assessment.
  # If this is null the system is in an inconsistent state and the assessment should be deleted.
  assignment: Assignment

  # The progress of processing the assessment. In particular when processing is done,
  # the assessment's task contents will have been indexed for search.
  aiProcessingProgress: AiEntityProcessingProgress!

  # Tags suggested for this assessment by the AI system.
  suggestedTags: [String!]!
}

#
# Feedback data when "logAssignmentCompleted" is called.
type AssignmentCompletedFeedback {
  #
  # Whether the assignment was passed or not.
  success: Boolean!

  #
  # The percentage of achieved credits compared to total credits.
  correctness: Float!
}

type AssignmentMutation {
  #
  # ID of the assignment that is being modified.
  assessmentId: UUID!

  #
  # Creates a new exercise. Throws an error if the assignment does not exist.
  createExercise(input: CreateExerciseInput!): Exercise!

  #
  # Updates an exercise. Throws an error if the exercise does not exist.
  updateExercise(input: UpdateExerciseInput!): Exercise!

  #
  # Deletes the exercise with the specified ID. Throws an error if the exercise does not exist.
  deleteExercise(itemId: UUID!): UUID!

  #
  # Creates a new subexercise. Throws an error if the assignment does not exist.
  createSubexercise(input: CreateSubexerciseInput!): Subexercise!

  #
  # Updates a subexercise. Throws an error if the subexercise does not exist.
  updateSubexercise(input: UpdateSubexerciseInput!): Subexercise!

  #
  # Deletes the subexercise with the specified ID. Throws an error if the subexercise does not exist.
  deleteSubexercise(itemId: UUID!): UUID!
}

#
# The type of assignment.
enum AssignmentType {
  EXERCISE_SHEET
  PHYSICAL_TEST
  CODE_ASSIGNMENT
}

input AssociationInput {
  #
  # id of the corresponding item
  itemId: UUID

  #
  # Text of the left side of the association, in SlateJS JSON format.
  left: String!

  #
  # Text of the right side of the association, in SlateJS JSON format.
  right: String!

  #
  # Feedback for the association when the user selects a wrong answer, in SlateJS JSON format.
  feedback: JSON
}

#
# Association question, i.e., a question where the user has to assign the correct right side to each left side.
type AssociationQuestion implements Question {
  #
  # Text to display above the association question, in SlateJS JSON format.
  text: JSON!

  #
  # List of correct associations.
  correctAssociations: [SingleAssociation!]!

  #
  # Computed list of all the left sides of the associations, shuffled.
  leftSide: [String!]!

  #
  # Computed list of all the right sides of the associations, shuffled.
  rightSide: [String!]!

  #
  # Unique identifier of the question and the id of the corresponding item
  itemId: UUID!

  #
  # Number of the question, i.e., the position of the question in the list of questions.
  # Only relevant if questionPoolingMode is ORDERED.
  number: Int!

  #
  # Type of the question.
  type: QuestionType!

  #
  # Optional hint for the question, in SlateJS JSON format.
  hint: JSON
  item: Item!
}

#
# Level of Blooms Taxonomy
enum BloomLevel {
  REMEMBER
  UNDERSTAND
  APPLY
  ANALYZE
  EVALUATE
  CREATE
}

#
# A chapter is a part of a course.
type Chapter {
  #
  # UUID of the chapter, generated automatically
  id: UUID!

  #
  # Title of the chapter, maximum length is 255 characters.
  title: String!

  #
  # Description of the chapter, maximum length is 3000 characters.
  description: String!

  #
  # Number of the chapter, determines the order of the chapters.
  number: Int!

  #
  # Start date of the chapter, ISO 8601 format.
  startDate: DateTime!

  #
  # End date of the chapter, ISO 8601 format.
  endDate: DateTime!

  #
  # Suggested Start date to start the chapter, ISO 8601 format.
  # Must be after Start Date and before the End dates.
  suggestedStartDate: DateTime

  #
  # Suggested End date of the chapter, ISO 8601 format.
  # Must be after the Start Dates and before the End dates.
  suggestedEndDate: DateTime

  #
  # The course the chapter belongs to.
  course: Course!

  # Contents of this chapter.
  contents: [Content!]!

  # Contents of this chapter which are not in any section.
  contentsWithNoSection: [Content!]!

  # Sections of this chapter.
  sections: [Section!]!

  # The skill types which are achievable in this chapter.
  # A skill type is achievable if there is at least one assessment in this chapter with this skill type.
  achievableSkillTypes: [SkillType]!

  # The progress of the current user in this chapter.
  userProgress: CompositeProgressInformation!
  skills: [Skill]!
}

input ChapterFilter {
  and: [ChapterFilter!]
  description: StringFilter
  endDate: DateTimeFilter
  not: ChapterFilter
  number: IntFilter
  or: [ChapterFilter!]
  startDate: DateTimeFilter
  suggestedEndDate: DateTimeFilter
  suggestedStartDate: DateTimeFilter
  title: StringFilter
}

type ChapterPayload {
  elements: [Chapter!]!
  pagination: PaginationInfo!
}

type ClozeBlankElement {
  correctAnswer: String!
  feedback: JSON
}

union ClozeElement = ClozeTextElement | ClozeBlankElement

input ClozeElementInput {
  correctAnswer: String
  feedback: JSON
  text: JSON
  type: ClozeElementType!
}

enum ClozeElementType {
  BLANK
  TEXT
}

type ClozeQuestion implements Question {
  additionalWrongAnswers: [String!]!
  allBlanks: [String!]!
  clozeElements: [ClozeElement!]!
  hint: JSON
  item: Item!
  itemId: UUID!
  number: Int!
  showBlanksList: Boolean!
  type: QuestionType!
}

type ClozeTextElement {
  text: JSON!
}

type CodeAssignmentGradingMetadata {
  #
  # The repository link of for the external code assignment.
  repoLink: String

  #
  # The pipeline status of the corresponding repository.
  status: String

  #
  # The Github worfklow run log table HTML of the corresponding repository.
  feedbackTableHtml: String
}

type CodeAssignmentMetadata {
  #
  # Link to the GitHub Classroom or equivalent (optional, CODE_ASSIGNMENT only).
  assignmentLink: String

  #
  # Invitation link for students to join the assignment (optional, CODE_ASSIGNMENT only).
  invitationLink: String

  #
  # README content in HTML format for the assignment (optional, CODE_ASSIGNMENT only).
  readmeHtml: String
}

type CompositeProgressInformation {
  #
  # percentage of completedContents/totalContents
  progress: Float!

  #
  # absolut number of completed content
  completedContents: Int!

  #
  # absolut number of total content
  totalContents: Int!
}

interface Content {
  #
  # ID of the content
  id: UUID!

  #
  # Metadata of the content
  metadata: ContentMetadata!

  #
  # Progress data of the content for the current user.
  userProgressData: UserProgressData!

  #
  # Progress data of the specified user.
  progressDataForUser(userId: UUID!): UserProgressData!

  #
  # For the current user, returns true if this content could be worked on by the user (i.e. it is not locked), false
  # if content is not available to be worked on (e.g. because previous stage has not been completed)
  isAvailableToBeWorkedOn: Boolean!
}

type ContentMetadata {
  #
  # Name of the content
  name: String!

  #
  # Content type
  type: ContentType!

  #
  # Suggested date when the content should be done
  suggestedDate: DateTime!

  #
  # Number of reward points a student receives for completing this content
  rewardPoints: Int!

  #
  # ID of the chapter this content is associated with
  chapterId: UUID!
  course: Course!
  courseId: UUID!
  name: String!
  rewardPoints: Int!
  suggestedDate: DateTime!
  tagNames: [String!]!
  type: ContentType!
}

type ContentMutation {
  addTagToContent(tagName: String): Content!
  contentId: UUID!
  deleteContent: UUID!
  removeTagFromContent(tagName: String): Content!
  updateAssessment(input: UpdateAssessmentInput!): Assessment!
  updateMediaContent(input: UpdateMediaContentInput!): MediaContent!
}

type ContentPayload {
  elements: [Content!]!
  pageInfo: PaginationInfo!
}

enum ContentType {
  FLASHCARDS
  MEDIA
  QUIZ
  ASSIGNMENT
}

type Course {
  chapters(filter: ChapterFilter, pagination: Pagination, sortBy: [String!]! = [], sortDirection: [SortDirection!]! = [ASC]): ChapterPayload!
  description: String!
  endDate: DateTime!
  id: UUID!
  mediaRecords: [MediaRecord!]!
  memberships: [CourseMembership!]!
  published: Boolean!
  rewardScores: RewardScores!
  scoreboard: [ScoreboardItem!]!
  skills: [Skill!]!
  startDate: DateTime!
  startYear: Int
  suggestions(amount: Int!, skillTypes: [SkillType!]! = []): [Suggestion!]!
  title: String!
  userProgress: CompositeProgressInformation!
  yearDivision: YearDivision
}

input CourseFilter {
  and: [CourseFilter!]
  description: StringFilter
  endDate: DateTimeFilter
  not: CourseFilter
  or: [CourseFilter!]
  published: Boolean
  startDate: DateTimeFilter
  title: StringFilter
}

type CourseMembership {
  course: Course!
  courseId: UUID!
  role: UserRoleInCourse!
  user: PublicUserInfo
  userId: UUID!
}

input CourseMembershipInput {
  courseId: UUID!
  role: UserRoleInCourse!
  userId: UUID!
}

type CoursePayload {
  elements: [Course!]!
  pagination: PaginationInfo!
}

input CreateAssessmentInput {
  assessmentMetadata: AssessmentMetadataInput!
  items: [CreateItemInput!]
  metadata: CreateContentMetadataInput!
}

input CreateAssignmentInput {
  #
  # Number of total credits in the assignment. Optional for CODE_ASSIGNMENT.
  # Can be set later when grades are available.
  totalCredits: Float

  #
  # List of exercises in this Assignment
  # Optional for CODE_ASSIGNMENT since GH Classroom does not provide exercises.
  exercises: [CreateExerciseInput!]

  #
  # Type of the assignment, e.g. exercise sheet or physical test.
  assignmentType: AssignmentType!

  #
  # The date at which the assignment had to be handed in (optional).
  date: DateTime

  #
  # Description of the assignment (optional).
  description: String

  #
  # The required percentage to pass the assignment. A value between 0 and 1. Defaults to 0.5. (optional)
  requiredPercentage: Float

  #
  # The id of the exercise sheet in an external system like TMS. (optional)
  # This is needed for mapping grading data to assignments.
  externalId: String
}

input CreateAssociationInput {
  #
  # Text of the left side of the association, in SlateJS JSON format.
  left: String!

  #
  # Text of the right side of the association, in SlateJS JSON format.
  right: String!

  #
  # Feedback for the association when the user selects a wrong answer, in SlateJS JSON format.
  feedback: JSON
}

input CreateAssociationQuestionInput {
  #
  # id of the corresponding item
  itemId: UUID!

  #
  # Number of the question, used for ordering.
  # This can be omitted, in which case a number, one higher than the highest number of the existing questions, will be used.
  number: Int

  #
  # Text of the question, in SlateJS JSON format.
  text: JSON!

  #
  # List of associations.
  correctAssociations: [AssociationInput!]!

  #
  # Optional hint for the question, in SlateJS JSON format.
  hint: JSON
}

input CreateAssociationQuestionInputWithoutItem {
  number: Int
  text: JSON!
  correctAssociations: [CreateAssociationInput!]!
  hint: JSON
  number: Int
  text: JSON!
}

input CreateChapterInput {
  courseId: UUID!
  description: String!
  endDate: DateTime!
  number: Int!
  startDate: DateTime!
  suggestedEndDate: DateTime
  suggestedStartDate: DateTime
  title: String!
}

input CreateClozeElementInput {
  correctAnswer: String
  feedback: JSON
  text: JSON
  type: ClozeElementType!
}

input CreateClozeQuestionInput {
  additionalWrongAnswers: [String!]! = []
  clozeElements: [ClozeElementInput!]!
  hint: JSON
  itemId: UUID!
  number: Int
  showBlanksList: Boolean! = true
}

input CreateClozeQuestionInputWithoutItem {
  additionalWrongAnswers: [String!]! = []
  clozeElements: [CreateClozeElementInput!]!
  hint: JSON
  number: Int
  showBlanksList: Boolean! = true
}

input CreateContentMetadataInput {
  chapterId: UUID!
  name: String!
  rewardPoints: Int!
  suggestedDate: DateTime!
  tagNames: [String!]! = []
  type: ContentType!
}

input CreateCourseInput {
  description: String!
  endDate: DateTime!
  published: Boolean!
  startDate: DateTime!
  startYear: Int
  title: String!
  yearDivision: YearDivision
}

input CreateExactAnswerQuestionInput {
  caseSensitive: Boolean! = false
  correctAnswers: [String!]!
  feedback: JSON
  hint: JSON
  itemId: UUID
  number: Int
  text: JSON!
}

input CreateExactAnswerQuestionInputWithoutItem {
  caseSensitive: Boolean! = false
  correctAnswers: [String!]!
  feedback: JSON
  hint: JSON
  number: Int
  text: JSON!
}

input CreateExerciseInput {
  #
  # the id of the item the exercise belongs to
  itemId: UUID!

  #
  # The amount of credits that can be earned on this exercise including all sub-exercises. (Positive or zero)
  totalExerciseCredits: Float!

  #
  # Sub-exercises making up the exercise, i.e. parts a),b),c),...
  subexercises: [CreateSubexerciseInput!]!

  #
  # The number of the exercise on the exercise sheet, may be something such as 2 (optional).
  number: String
}

input CreateFlashcardInput {
  #
  # id of the item the flashcard belongs to
  itemId: UUID

  #
  # List of sides of this flashcard. Must be at least two sides.
  sides: [FlashcardSideInput!]!
}

input CreateFlashcardInputWithoutItem {
  sides: [FlashcardSideInput!]!
}

input CreateFlashcardSetInput {
  flashcards: [CreateFlashcardInput!]!
}

input CreateItemInput {
  associatedBloomLevels: [BloomLevel!]!
  associatedSkills: [CreateSkillInput!]!
}

input CreateMediaContentInput {
  metadata: CreateContentMetadataInput!
}

input CreateMediaRecordInput {
  contentIds: [UUID!]!
  name: String!
  type: MediaType!
}

input CreateMultipleChoiceQuestionInput {
  answers: [MultipleChoiceAnswerInput!]!
  hint: JSON
  itemId: UUID!
  number: Int
  text: JSON!
}

input CreateMultipleChoiceQuestionInputWithoutItem {
  answers: [MultipleChoiceAnswerInput!]!
  hint: JSON
  number: Int
  text: JSON!
}

input CreateNumericQuestionInput {
  correctAnswer: Float!
  feedback: JSON
  hint: JSON
  itemId: UUID!
  number: Int
  text: JSON!
  tolerance: Float!
}

input CreateNumericQuestionInputWithoutItem {
  correctAnswer: Float!
  feedback: JSON
  hint: JSON
  number: Int
  text: JSON!
  tolerance: Float!
}

input CreateQuizInput {
  numberOfRandomlySelectedQuestions: Int
  questionPoolingMode: QuestionPoolingMode!
  requiredCorrectAnswers: Int!
}

input CreateSectionInput {
  chapterId: UUID!
  name: String!
}

input CreateSelfAssessmentQuestionInput {
  hint: JSON
  itemId: UUID!
  number: Int
  solutionSuggestion: JSON!
  text: JSON!
}

input CreateSelfAssessmentQuestionInputWithoutItem {
  hint: JSON
  number: Int
  solutionSuggestion: JSON!
  text: JSON!
}

input CreateSkillInput {
  isCustomSkill: Boolean
  skillCategory: String!
  skillName: String!
}

input CreateStageInput {
  #
  # updated List of UUIDs for content labeled as required in this Stage
  requiredContents: [UUID!]!

  #
  # updated List of UUIDs for content labeled as optional in this Stage
  optionalContents: [UUID!]!
}

input CreateSubexerciseInput {
  #
  # the id of the item the subexercise belongs to
  itemId: UUID!

  #
  # the id of the exercise this subexercise belongs to
  parentExerciseId: UUID!

  #
  # The amount of credits that can be earned on this sub-exercise. (Positive or zero)
  totalSubexerciseCredits: Float!

  #
  # The number of the exercise on the exercise sheet, may be something such as 2b (optional).
  number: String
}

# An RFC-3339 compliant Full Date Scalar
scalar Date

scalar DateTime

input DateTimeFilter {
  after: DateTime
  before: DateTime
}

directive @DecimalMax(value: String!, inclusive: Boolean! = true, message: String = "graphql.validation.DecimalMax.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @DecimalMin(value: String!, inclusive: Boolean! = true, message: String = "graphql.validation.DecimalMin.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @defer(if: Boolean! = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type DocumentRecordSegment implements MediaRecordSegment {
  id: UUID!
  mediaRecord: MediaRecord!
  mediaRecordId: UUID!
  page: Int!
  text: String!
  thumbnail: String!
  title: String
}

type ExactAnswerQuestion implements Question {
  caseSensitive: Boolean!
  correctAnswers: [String!]!
  feedback: JSON
  hint: JSON
  item: Item!
  itemId: UUID!
  number: Int!
  text: JSON!
  type: QuestionType!

  #
  # Optional hint for the question, in SlateJS JSON format.
  hint: JSON
  item: Item!
}

type Exercise {
  #
  # Unique identifier of the exercise and the id of the corresponding item
  itemId: UUID!

  #
  # The amount of credits that can be earned on this exercise including all sub-exercises.
  totalExerciseCredits: Float!

  #
  # Sub-exercises making up the exercise, i.e. parts a),b),c),...
  subexercises: [Subexercise!]!

  #
  # The number of the exercise on the exercise sheet, may be something such as 2 (optional).
  number: String

  #
  # Feedback given by a tutor on the exercise (optional).
  tutorFeedback: String
}

input ExerciseCompletedInput {
  #
  # ID of the exercise.
  itemId: UUID!

  #
  # The absolute number of achieved credits.
  achievedCredits: Float!

  #
  # List of subexercises that were completed in the exercise. Can be empty, if there are no subexercises within the exercise.
  completedSubexercises: [SubexerciseCompletedInput]!
}

type ExerciseGrading {
  #
  # ID of the exercise.
  itemId: UUID!

  #
  # ID of the student the exercise-grading belongs to.
  studentId: UUID!

  #
  # The absolute number of achieved credits on the exercise.
  achievedCredits: Float!

  #
  # List of subexercise-gradings for each subexercise in the exercise. Can be
  # empty, if there are no subexercises within the exercise.
  subexerciseGradings: [SubexerciseGrading]!
}

#
# An external Assignment such as the ones from TMS. These are needed for mapping
# Meitrex Assignments to external ones for importing gradings.
type ExternalAssignment {
  externalId: String!
  sheetNo: Float!
}

type ExternalCourse {
  #
  # The name of the course.
  courseTitle: String!

  #
  # The url to the course.
  url: String!
}

enum ExternalServiceProviderDto {
  GITHUB
}

type ExternalUserIdWithUser {
  userId: UUID!
  externalUserId: String!
}

#
# A flashcard is a set of two or more sides. Each side has a label and a text.
# The label is used to specify which side of the flashcard is being shown to the user first for learning
# and which sides he has to guess.
type Flashcard {
  item: Item!
  itemId: UUID!
  sides: [FlashcardSide!]!
  userProgressData: FlashcardProgressData!
}

type FlashcardLearnedFeedback {
  flashcardSetProgress: FlashcardSetProgress!
  nextLearnDate: DateTime!
  success: Boolean!
}

type FlashcardOutput {
  flashcard: Flashcard!
}

type FlashcardProgressData {
  lastLearned: DateTime
  learningInterval: Int
  nextLearn: DateTime
}

type FlashcardProgressDataLog {
  id: UUID
  learnedAt: DateTime!
  success: Boolean!
}

type FlashcardSet {
  assessmentId: UUID!
  content: Content
  courseId: UUID!
  flashcards: [Flashcard!]!
}

type FlashcardSetAssessment implements Assessment & Content {
  aiProcessingProgress: AiEntityProcessingProgress!
  assessmentMetadata: AssessmentMetadata!
  flashcardSet: FlashcardSet
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  items: [Item!]!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  suggestedTags: [String!]!
  userProgressData: UserProgressData!
}

type FlashcardSetMutation {
  assessmentId: UUID!
  createFlashcard(assessmentId: UUID!, flashcardInput: CreateFlashcardInputWithoutItem!, item: CreateItemInput!): FlashcardOutput!
  deleteFlashcard(id: UUID!): UUID!
  updateFlashcard(assessmentId: UUID!, flashcardInput: UpdateFlashcardInput!, item: ItemInput!): FlashcardOutput!
}

type FlashcardSetProgress {
  correctness: Float!
  percentageLearned: Float!
}

type FlashcardSide {
  isAnswer: Boolean!
  isQuestion: Boolean!
  label: String!
  text: JSON!
}

input FlashcardSideInput {
  isAnswer: Boolean!
  isQuestion: Boolean!
  label: String!
  text: JSON!

  #
  # Label of this flashcard side. E.g. "Front" or "Back", or "Question" or "Answer".
  label: String!

  #
  # Whether this side is a question, i.e. should be shown to the user to guess the other sides or not.
  isQuestion: Boolean!

  #
  # Whether this side is also an answer. Some Flashcards can have their sides be
  # used as both questions or answers for the other sides
  isAnswer: Boolean!
}

input GenerateAccessTokenInput {
  provider: ExternalServiceProviderDto!
  authorizationCode: String!
}

input GenerateMediaRecordLinksInput {
  contentId: UUID!
}

enum GlobalUserRole {
  COURSE_CREATOR
}

#
# A grading contains a user's achieved credits on an assignment and its exercises and subexercises.
type Grading {
  #
  # ID of the assignment.
  assessmentId: UUID!

  #
  # ID of the student the grading belongs to.
  studentId: UUID!

  #
  # The date and time of when the tutor corrected the assignment.
  date: DateTime

  #
  # The absolute number of achieved credits on the assignment.
  achievedCredits: Float

  #
  # CodeAssignmentGradingMetadata contains metadata for the external code assignment grading.
  codeAssignmentGradingMetadata: CodeAssignmentGradingMetadata

  #
  # List of exercise-gradings for each exercise in the assignment. Can be empty,
  # if there are no exercises within the assignment.
  exerciseGradings: [ExerciseGrading!]

  # The user this grading belongs to.
  student: PublicUserInfo
}

input IngestMediaRecordInput {
  # UUID of the media record of this document.
  id: UUID!
}

#
# Filter for integer values.
# If multiple filters are specified, they are combined with AND.
input IntFilter {
  #
  # An integer value to match exactly.
  equals: Int

  #
  # If specified, filters for values greater than to the specified value.
  greaterThan: Int

  #
  # If specified, filters for values less than to the specified value.
  lessThan: Int
}

#
# An item is a part of an assessment. Based on students' performances on items the
# SkillLevel Service estimates a students knowledge.
# An item is something like a question in a quiz, a flashcard of a flashcard set.
type Item {
  #
  # the id of the item
  id: UUID!

  #
  # The skills or the competencies the item belongs to.
  associatedSkills: [Skill!]!

  #
  # The Level of Blooms Taxonomy the item belongs to
  associatedBloomLevels: [BloomLevel!]!
}

input ItemInput {
  #
  # might be empty if a new item is created
  id: UUID

  #
  # The skills or the competencies the item belongs to.
  associatedSkills: [SkillInput!]!

  #
  # The Level of Blooms Taxonomy the item belongs to
  associatedBloomLevels: [BloomLevel!]!
}

type ItemProgress {
  itemId: UUID!
  responseCorrectness: Float!
}

scalar JSON

scalar LocalTime

input LogAssignmentCompletedInput {
  #
  # ID of the assignment.
  assessmentId: UUID!

  #
  # The absolute number of achieved credits.
  achievedCredits: Float!

  #
  # List of exercises that were completed in the assignment. Can be empty, if there are no exercises within the assignment.
  completedExercises: [ExerciseCompletedInput]!
}

input LogFlashcardLearnedInput {
  #
  # The id of the flashcard that was learned.
  flashcardId: UUID!

  #
  # If the user knew the flashcard or not.
  successful: Boolean!
}

input LogFlashcardSetLearnedInput {
  flashcardSetId: UUID!
  percentageSuccess: Float!
  userId: UUID!
}

#
# An object to represent a student where the backend could not automatically map the external student to a meitrex user.
type ManualMappingInstance {
  #
  # Student Id in external system like TMS
  externalStudentId: String!

  #
  # JSON Object containing all available information on the external student.
  externalStudentInfo: String!
}

type MediaContent implements Content {
  aiProcessingProgress: AiEntityProcessingProgress!
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  mediaRecords: [MediaRecord!]!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  segmentLinks: [MediaRecordSegmentLink!]!
  userProgressData: UserProgressData!
}

type MediaRecord {
  aiProcessingProgress: AiEntityProcessingProgress!
  closedCaptions: String
  contentIds: [UUID!]!
  contents: [Content]!
  courseIds: [UUID!]!
  creatorId: UUID!
  downloadUrl: String!
  id: UUID!
  internalDownloadUrl: String!
  internalUploadUrl: String!
  name: String!
  segments: [MediaRecordSegment!]!
  standardizedDownloadUrl: String
  suggestedTags: [String!]!
  summary: [String!]!
  type: MediaType!
  uploadUrl: String!
  userProgressData: MediaRecordProgressData!
}

type MediaRecordProgressData {
  dateWorkedOn: DateTime
  workedOn: Boolean!
}

interface MediaRecordSegment {
  id: UUID!
  mediaRecordId: UUID!
  thumbnail: String!
  title: String
}

type MediaRecordSegmentLink {
  segment1: MediaRecordSegment!
  segment2: MediaRecordSegment!
}

type MediaRecordSegmentSemanticSearchResult implements SemanticSearchResult {
  mediaRecordSegment: MediaRecordSegment!
  score: Float!
}

enum MediaType {
  AUDIO
  DOCUMENT
  IMAGE
  PRESENTATION
  URL
  VIDEO
}

directive @Min(value: Int! = 0, message: String = "graphql.validation.Min.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type MultipleChoiceAnswer {
  answerText: JSON!
  correct: Boolean!
  feedback: JSON
}

input MultipleChoiceAnswerInput {
  answerText: JSON!
  correct: Boolean!
  feedback: JSON
}

type MultipleChoiceQuestion implements Question {
  answers: [MultipleChoiceAnswer!]!
  hint: JSON
  item: Item!
  itemId: UUID!
  number: Int!
  numberOfCorrectAnswers: Int!
  text: JSON!
  type: QuestionType!
}

type Mutation {
  #
  #     ONLY FOR TESTING PURPOSES. DO NOT USE IN FRONTEND. WILL BE REMOVED.
  #
  #     Triggers the recalculation of the reward score of the user.
  #     This is done automatically at some time in the night.
  #
  #     The purpose of this mutation is to allow testing of the reward score and demonstrate the functionality.
  #     🔒 The user be an admin in the course with the given courseId to perform this action.
  recalculateScores(courseId: UUID!, userId: UUID!): RewardScores! @deprecated(reason: "Only for testing purposes. Will be removed.")

  #
  # Update top-level fields of an assignment.
  # 🔒 The user must be an admin in the course the assignment belongs to.
  updateAssignment(assessmentId: UUID!, input: UpdateAssignmentInput!): Assignment!

  #
  # Modify an assignment.
  # 🔒 The user must be an admin in the course the assignment is in to perform this action.
  mutateAssignment(assessmentId: UUID!): AssignmentMutation!

  #
  # Logs that a user's assignment score has been imported, i.e. the user has completed the assignment.
  # 🔒 The user must be a tutor in the course the assignment is in to perform this action.
  logAssignmentCompleted(input: LogAssignmentCompletedInput!): AssignmentCompletedFeedback!

  #
  # Saves mappings of meitrex users to external students.
  # Used to deal with ManualMappingInstances.
  # Returns list of all deleted ManualMappingInstance ids.
  # Returns null if connection to UserService failed.
  # 🔒 The user must be an admin in the course to perform this action.
  saveStudentMappings(courseId: UUID!, studentMappingInputs: [StudentMappingInput!]!): [String]!

  #
  # Fetches assignment info from external code assessment provider for the given course
  syncAssignmentsForCourse(courseId: UUID!): Boolean!
  evaluatePlayerHexadScore(userId: UUID!, input: PlayerAnswerInput!): PlayerHexadScore!

  #
  # Creates a new course with the given input and returns the created course.
  createCourse(input: CreateCourseInput!): Course!

  #
  # Creates a new chapter with the given input and returns the created chapter.
  # The course id must be a course id of an existing course.
  # 🔒 The user must be an admin in this course to perform this action.
  createChapter(input: CreateChapterInput!): Chapter!
  createCourse(input: CreateCourseInput!): Course!
  createFlashcardSetAssessment(assessmentInput: CreateAssessmentInput!, flashcardSetInput: CreateFlashcardSetInput!): FlashcardSetAssessment
  createMediaContentAndLinkRecords(contentInput: CreateMediaContentInput!, mediaRecordIds: [UUID!]!): MediaContent!
  createMediaRecord(input: CreateMediaRecordInput!): MediaRecord!
  createMembership(input: CourseMembershipInput!): CourseMembership!
  createQuizAssessment(assessmentInput: CreateAssessmentInput!, quizInput: CreateQuizInput!): QuizAssessment!
  createSection(input: CreateSectionInput!): Section!
  defaultSettings(userId: UUID!): Settings!
  deleteChapter(id: UUID!): UUID!
  deleteCourse(id: UUID!): UUID!
  deleteFlashcardSet(assessmentId: UUID!): UUID! @deprecated(reason: "Only use if you specifically only want to delete the flashcard set and not the whole assessment. Otherwise, use deleteAssessment in contents service instead.")
  deleteMediaRecord(id: UUID!): UUID!
  deleteMembership(input: CourseMembershipInput!): CourseMembership!

  #
  # Modify a flashcard set.
  # 🔒 The user must be an admin the course the flashcard set is in to perform this action.
  mutateFlashcardSet(assessmentId: UUID!): FlashcardSetMutation!

  #
  # Logs that a user has learned a flashcard.
  # 🔒 The user must be enrolled in the course the flashcard set is in to perform this action.
  logFlashcardLearned(input: LogFlashcardLearnedInput!): FlashcardLearnedFeedback!

  #
  # Modify a quiz.
  # 🔒 The user must be an admin the course the quiz is in to perform this action.
  mutateQuiz(assessmentId: UUID!): QuizMutation!

  #
  # Delete a quiz.
  deleteQuiz(assessmentId: UUID!): UUID! @deprecated(reason: "Only use if you specifically only want to delete the quiz and not the whole assessment. Otherwise, use deleteAssessment in contents service instead.")

  #
  # Log that a multiple choice quiz is completed.
  # 🔒 The user must be enrolled in the course the quiz is in to perform this action.
  logQuizCompleted(input: QuizCompletedInput!): QuizCompletionFeedback!

  #
  #   ONLY FOR TESTING PURPOSES. DO NOT USE IN FRONTEND. WILL BE REMOVED.
  #
  #   Triggers the recalculation of the skill level of the user.
  #   This is done automatically at some time in the night.
  #
  #   The purpose of this mutation is to allow testing of the skill level score and demonstrate the functionality.
  #   🔒 The user must be a super-user, otherwise an exception is thrown.
  recalculateLevels(chapterId: UUID!, userId: UUID!): SkillLevels! @deprecated(reason: "Only for testing purposes. Will be removed.")

  #
  # Creates a new media record
  # 🔒 The user must have the "course-creator" role to perform this action.
  # 🔒 If the mediaRecord is associated with courses the user must be an administrator of all courses or a super-user.
  createMediaRecord(input: CreateMediaRecordInput!): MediaRecord!

  #
  # Updates an existing media record with the given UUID
  # 🔒 If the mediaRecord is associated with courses the user must be an administrator of at least one of the courses.
  updateMediaRecord(input: UpdateMediaRecordInput!): MediaRecord!

  #
  # Deletes the media record with the given UUID
  # 🔒 If the mediaRecord is associated with courses the user must be an administrator of at least one of the courses.
  deleteMediaRecord(id: UUID!): UUID!

  #
  # For a given MediaContent, sets the linked media records of it to the ones with the given UUIDs.
  # This means that for the content, all already linked media records are removed and replaced by the given ones.
  # 🔒 If the mediaRecord is associated with courses the user must be an administrator of at least one of the courses.
  setLinkedMediaRecordsForContent(contentId: UUID!, mediaRecordIds: [UUID!]!): [MediaRecord!]!

  #
  #     Logs that a media has been worked on by the current user.
  #     See https://gits-enpro.readthedocs.io/en/latest/dev-manuals/gamification/userProgress.html
  #
  #     Possible side effects:
  #     When all media records of a content have been worked on by a user,
  #     a user-progress event is emitted for the content.
  #     🔒 If the mediaRecord is associated with courses the user must be a member of at least one of the courses.
  logMediaRecordWorkedOn(mediaRecordId: UUID!): MediaRecord!

  #
  # Add the MediaRecords with the given UUIDS to the Course with the given UUID.
  # 🔒 If the mediaRecord is associated with courses the user must be an administrator of at least one of the courses.
  setMediaRecordsForCourse(courseId: UUID!, mediaRecordIds: [UUID!]!): [MediaRecord!]!

  #
  # Modify Content
  # 🔒 The user must have admin access to the course containing the section to perform this action.
  mutateContent(contentId: UUID!): ContentMutation!
  mutateFlashcardSet(assessmentId: UUID!): FlashcardSetMutation!
  mutateQuiz(assessmentId: UUID!): QuizMutation!
  mutateSection(sectionId: UUID!): SectionMutation!

  #
  # Generates an access token for the given provider using an authorization code obtained from the OAuth flow.
  # This should be called **only after** the user completes authorization and the frontend retrieves the auth code.
  # After the access token is generated, the user is redirected to the redirect URI.
  generateAccessToken(input: GenerateAccessTokenInput!): Boolean!

  # Creates a new media content and links the given media records to it.
  createMediaContentAndLinkRecords(contentInput: CreateMediaContentInput!, mediaRecordIds: [UUID!]!): MediaContent!

  # Creates a new quiz assessment and a new, linked quiz with the given properties.
  createQuizAssessment(assessmentInput: CreateAssessmentInput!, quizInput: CreateQuizInput!): QuizAssessment!

  # Creates a new flashcard set assessment and a new, linked flashcard set with the given properties.
  createFlashcardSetAssessment(assessmentInput: CreateAssessmentInput!, flashcardSetInput: CreateFlashcardSetInput!): FlashcardSetAssessment

  # Creates a new assignment assessment and a new, linked assignment with the given properties.
  createAssignmentAssessment(assessmentInput: CreateAssessmentInput!, assignmentInput: CreateAssignmentInput!): AssignmentAssessment!

  # Creates a new section in a chapter.
  createSection(input: CreateSectionInput!): Section!
}

type NumericQuestion implements Question {
  correctAnswer: Float!
  feedback: JSON
  hint: JSON
  item: Item!
  itemId: UUID!
  number: Int!
  text: JSON!
  tolerance: Float!
  type: QuestionType!
}

directive @OnDemand on FIELD_DEFINITION

directive @oneOf on INPUT_OBJECT

input Pagination {
  page: Int! = 0
  size: Int!
}

type PaginationInfo {
  hasNext: Boolean!
  page: Int!
  size: Int!
  totalElements: Int!
  totalPages: Int!
}

directive @Pattern(regexp: String! = ".*", message: String = "graphql.validation.Pattern.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

input PlayerAnswerInput {
  questions: [QuestionInput!]!
}

type PlayerHexadScore {
  scores: [PlayerTypeScore!]!
}

enum PlayerType {
  ACHIEVER
  DISRUPTOR
  FREE_SPIRIT
  PHILANTHROPIST
  PLAYER
  SOCIALISER
}

type PlayerTypeScore {
  type: PlayerType!
  value: Float!
}

directive @Positive(message: String = "graphql.validation.Positive.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @PositiveOrZero(message: String = "graphql.validation.PositiveOrZero.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type ProgressLogItem {
  correctness: Float!
  hintsUsed: Int!
  progressPerItem: ItemProgress!
  success: Boolean!
  timestamp: DateTime!
  timeToComplete: Int
}

type PublicUserInfo {
  id: UUID!
  userName: String!
}

type Query {
  #
  # Get the reward score of the current user for the specified course.
  # 🔒 The user must have access to the course with the given id to access their scores, otherwise an error is thrown.
  userCourseRewardScores(courseId: UUID!): RewardScores!

  #
  # Get the reward score of the specified user for the specified course.
  # 🔒 The user be an admin in the course with the given courseId to perform this action.
  courseRewardScoresForUser(courseId: UUID!, userId: UUID!): RewardScores!

  #
  # Gets the power scores for each user in the course, ordered by power score descending.
  # 🔒 The user must have access to the course with the given id to access the scoreboard, otherwise an error is thrown.
  scoreboard(courseId: UUID!): [ScoreboardItem!]!

  #
  # Get assignment by assessment ID.
  # If any of the assessment IDs are not found, the corresponding assignment will be null.
  # 🔒 The user must be enrolled in the course the assignments belong to to access them. Otherwise null is returned for
  # an assignment if the user has no access to it.
  findAssignmentsByAssessmentIds(assessmentIds: [UUID!]!): [Assignment]!

  #
  # Get all gradings for one assignment
  # 🔒 The user must be an admin in the course the assignment belongs to to access them. Otherwise null is returned for
  # an assignment if the user has no access to it.
  getGradingsForAssignment(assessmentId: UUID!): [Grading!]!

  #
  # Gets all the available external exercises.
  # CourseId is the id of the course the user is currently working in.
  # 🔒 The user must be an admin in the course. Otherwise null is returned.
  getExternalAssignments(courseId: UUID!): [ExternalAssignment!]!

  #
  # Gets all the available external code exercises.
  # CourseId is the id of the course the user is currently working in.
  # 🔒 The user must be an admin in the course. Otherwise null is returned.
  getExternalCodeAssignments(courseId: UUID!): [String!]!

  #
  # Get the corresponding external course for the given courseId.
  # CourseId is the id of the course the user is currently working in.
  # 🔒 The user must be an admin in the course. Otherwise null is returned.
  getExternalCourse(courseId: UUID!): ExternalCourse

  #
  # Gets all manual student mappings, i.e. all students where the backend could not map to a meitrex user.
  # 🔒 The user must be an admin in the course. Otherwise null is returned.
  getManualMappingInstances(courseId: UUID!): [ManualMappingInstance]!
  getPlayerHexadScoreById(userId: UUID!): PlayerHexadScore!
  PlayerHexadScoreExists(userId: UUID!): Boolean!

  #
  # Get a list of courses. Can be filtered, sorted and paginated.
  # Courses and their basic data can be queried by any user, even if they are not enrolled in the course.
  courses(
    filter: CourseFilter

    #
    # The fields to sort by.
    # Throws an error if no field with the given name exists.
    sortBy: [String!]

    #
    # The sort direction for each field. If not specified, defaults to ASC.
    sortDirection: [SortDirection!]! = [ASC]
    pagination: Pagination
  ): CoursePayload!

  #
  # Returns the courses with the given ids.
  # Courses and their basic data can be queried by any user, even if they are not enrolled in the course.
  coursesByIds(ids: [UUID!]!): [Course!]!

  #
  # Get flashcards by their ids.
  # 🔒 The user must be enrolled in the course the flashcards belong to. Otherwise an error is thrown.
  flashcardsByIds(itemIds: [UUID!]!): [Flashcard!]!

  #
  # Get flashcard sets by their assessment ids.
  # Returns a list of flashcard sets in the same order as the provided ids.
  # Each element is null if the corresponding id is not found.
  # 🔒 The user must be enrolled in the course the flashcard sets belong to. Otherwise for that element null is returned.
  findFlashcardSetsByAssessmentIds(assessmentIds: [UUID!]!): [FlashcardSet]!

  #
  # Get flashcards of a course that are due to be reviewed.
  # 🔒 The user must be enrolled in the course the flashcards belong to. Otherwise an error is thrown.
  dueFlashcardsByCourseId(courseId: UUID!): [Flashcard!]!

  #
  # Get quiz by assessment ID.
  # If any of the assessment IDs are not found, the corresponding quiz will be null.
  # 🔒 The user must be enrolled in the course the quizzes belong to to access them. Otherwise null is returned for
  # an quiz if the user has no access to it.
  findQuizzesByAssessmentIds(assessmentIds: [UUID!]!): [Quiz]!

  #
  #     Returns the media records with the given IDs. Throws an error if a MediaRecord corresponding to a given ID
  #     cannot be found.
  #
  #     🔒 If the mediaRecord is associated with coursed the user must be a member of at least one of the courses.
  mediaRecordsByIds(ids: [UUID!]!): [MediaRecord!]!

  #
  #     Like mediaRecordsByIds() returns the media records with the given IDs, but instead of throwing an error if an ID
  #     cannot be found, it instead returns NULL for that media record.
  #
  #     🔒 If the mediaRecord is associated with coursed the user must be a member of at least one of the courses.
  findMediaRecordsByIds(ids: [UUID!]!): [MediaRecord]!
  findPublicUserInfos(ids: [UUID!]!): [PublicUserInfo]!
  findQuizzesByAssessmentIds(assessmentIds: [UUID!]!): [Quiz]!
  findUserInfos(ids: [UUID!]!): [UserInfo]!
  findUserSettings(userId: UUID!): Settings!
  flashcardsByIds(itemIds: [UUID!]!): [Flashcard!]!
  getPlayerHexadScoreById(userId: UUID!): PlayerHexadScore!
  getSemanticallySimilarEntities(count: Int! = 10, courseWhitelist: [UUID!], excludeEntitiesWithSameParent: Boolean, segmentId: UUID!): [SemanticSearchResult!]!
  mediaRecords: [MediaRecord!]! @deprecated(reason: "In production there should probably be no way to get all media records of the system.")
  mediaRecordsByContentIds(contentIds: [UUID!]!): [[MediaRecord!]!]!
  mediaRecordsByIds(ids: [UUID!]!): [MediaRecord!]!
  mediaRecordsForCourses(courseIds: [UUID!]!): [[MediaRecord!]!]!
  mediaRecordsForUsers(userIds: [UUID!]!): [[MediaRecord!]!]!

  #
  # Retrieves all existing contents for a given course.
  # 🔒 The user must have access to the courses with the given ids to access their contents, otherwise an error is thrown.
  contentsByCourseIds(courseIds: [UUID!]!): [[Content!]!]

  #
  # Get contents by ids. Throws an error if any of the ids are not found.
  # 🔒 The user must have access to the courses containing the contents with the given ids to access their contents,
  # otherwise an error is thrown.
  contentsByIds(ids: [UUID!]!): [Content!]!

  #
  # Get contents by ids. If any of the given ids are not found, the corresponding element in the result list will be null.
  # 🔒 The user must have access to the courses containing the contents with the given ids, otherwise null is returned
  # for the respective contents.
  findContentsByIds(ids: [UUID!]!): [Content]!

  #
  # Get contents by chapter ids. Returns a list containing sublists, where each sublist contains all contents
  # associated with that chapter
  # 🔒 The user must have access to the courses containing the chapters with the given ids, otherwise an error is thrown.
  contentsByChapterIds(chapterIds: [UUID!]!): [[Content!]!]!

  #
  #     Generates user specific suggestions for multiple chapters.
  #
  #     Only content that the user can access will be considered.
  #     The contents will be ranked by suggested date, with the most overdue or most urgent content first.
  #
  #     🔒 The user must have access to the courses containing the chapters with the given ids, otherwise an error is thrown.
  suggestionsByChapterIds(
    #
    # The ids of the chapters for which suggestions should be generated.
    chapterIds: [UUID!]!

    #
    # The amount of suggestions to generate in total.
    amount: Int!

    #
    # Only suggestions for these skill types will be generated.
    # If no skill types are given, suggestions for all skill types will be generated,
    # also containing suggestions for media content (which do not have a skill type).
    skillTypes: [SkillType!]! = []
  ): [Suggestion!]!

  #
  # Gets the publicly available information for a list of users with the specified IDs.
  # If a user does not exist, null is returned for that user.
  findPublicUserInfos(ids: [UUID!]!): [PublicUserInfo]!

  #
  # Gets the user information of the currently authorized user.
  currentUserInfo: UserInfo!

  #
  # Gets all of the users' information for a list of users with the specified IDs.
  # Only available to privileged users.
  # If a user does not exist, null is returned for that user.
  findUserInfos(ids: [UUID!]!): [UserInfo]!

  #
  # Checks whether an access token for a given third-party provider exists and is
  # still valid for the currently authenticated user.
  # Returns `true` if:
  # - The access token exists and is not expired, OR
  # - The refresh token exists and is not expired.
  isAccessTokenAvailable(provider: ExternalServiceProviderDto!): Boolean!

  # Performs a semantic search with the specified search term. Returns at most `count` results. If a courseWhitelist is
  # provided, only results from the specified courses will be returned.
  semanticSearch(queryText: String!, count: Int! = 10, courseWhitelist: [UUID!]): [SemanticSearchResult!]!

  # Returns semantic search results of entities that are semantically similar to the entity with the specified ID.
  # Returns at most `count` results. If `excludeEntitiesWithSameParent` is true, segments from the same entity as the
  # specified segment will be excluded from the results.
  getSemanticallySimilarEntities(segmentId: UUID!, count: Int! = 10, excludeEntitiesWithSameParent: Boolean, courseWhitelist: [UUID!]): [SemanticSearchResult!]!
}

interface Question {
  hint: JSON
  itemId: UUID!
  number: Int!
  type: QuestionType!
}

input QuestionCompletedInput {
  correct: Boolean!
  questionId: UUID!
  usedHint: Boolean!
}

input QuestionInput {
  possibleAnswers: [AnswerInput!]!
  selectedAnswer: AnswerInput!
  text: String!
}

enum QuestionPoolingMode {
  ORDERED
  RANDOM
}

enum QuestionType {
  ASSOCIATION
  CLOZE
  EXACT_ANSWER
  MULTIPLE_CHOICE
  NUMERIC
  SELF_ASSESSMENT
}

type Quiz {
  assessmentId: UUID!
  content: Content
  courseId: UUID!
  numberOfRandomlySelectedQuestions: Int
  questionPool: [Question!]!
  questionPoolingMode: QuestionPoolingMode!
  requiredCorrectAnswers: Int!
  selectedQuestions: [Question!]!
}

type QuizAssessment implements Assessment & Content {
  aiProcessingProgress: AiEntityProcessingProgress!
  assessmentMetadata: AssessmentMetadata!
  id: UUID!
  isAvailableToBeWorkedOn: Boolean!
  items: [Item!]!
  metadata: ContentMetadata!
  progressDataForUser(userId: UUID!): UserProgressData!
  quiz: Quiz
  suggestedTags: [String!]!
  userProgressData: UserProgressData!
}

input QuizCompletedInput {
  completedQuestions: [QuestionCompletedInput!]!
  quizId: UUID!
}

type QuizCompletionFeedback {
  correctness: Float!
  hintsUsed: Int!
  success: Boolean!
}

type QuizMutation {
  addAssociationQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateAssociationQuestionInputWithoutItem!): QuizOutput!
  addClozeQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateClozeQuestionInputWithoutItem!): QuizOutput!
  addExactAnswerQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateExactAnswerQuestionInputWithoutItem!): QuizOutput!
  addMultipleChoiceQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateMultipleChoiceQuestionInputWithoutItem!): QuizOutput!
  addNumericQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateNumericQuestionInputWithoutItem!): QuizOutput!
  addSelfAssessmentQuestion(assessmentId: UUID!, item: CreateItemInput!, questionInput: CreateSelfAssessmentQuestionInputWithoutItem!): QuizOutput!
  assessmentId: UUID!
  removeQuestion(number: Int!): Quiz!
  setNumberOfRandomlySelectedQuestions(numberOfRandomlySelectedQuestions: Int!): Quiz!
  setQuestionPoolingMode(questionPoolingMode: QuestionPoolingMode!): Quiz!
  setRequiredCorrectAnswers(requiredCorrectAnswers: Int!): Quiz!
  switchQuestions(firstNumber: Int!, secondNumber: Int!): Quiz!
  updateAssociationQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateAssociationQuestionInput!): QuizOutput!
  updateClozeQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateClozeQuestionInput!): QuizOutput!
  updateExactAnswerQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateExactAnswerQuestionInput!): QuizOutput!
  updateMultipleChoiceQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateMultipleChoiceQuestionInput!): QuizOutput!
  updateNumericQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateNumericQuestionInput!): QuizOutput!
  updateSelfAssessmentQuestion(assessmentId: UUID!, item: ItemInput!, questionInput: UpdateSelfAssessmentQuestionInput!): QuizOutput!
}

type QuizOutput {
  assessmentId: UUID!
  modifiedQuestion: Question!
  questionPool: [Question!]!
}

directive @Range(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.Range.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @resolveTo(requiredSelectionSet: String, sourceName: String!, sourceTypeName: String!, sourceFieldName: String!, sourceSelectionSet: String, sourceArgs: ResolveToSourceArgs, keyField: String, keysArg: String, pubsubTopic: String, filterBy: String, additionalArgs: ResolveToSourceArgs, result: String, resultType: String) on FIELD_DEFINITION

scalar ResolveToSourceArgs

enum RewardChangeReason {
  COMPOSITE_VALUE
  CONTENT_DONE
  CONTENT_DUE_FOR_LEARNING
  CONTENT_DUE_FOR_REPETITION
  CONTENT_REVIEWED
}

type RewardLogItem {
  associatedContentIds: [UUID!]!
  associatedContents: [Content]!
  date: DateTime!
  difference: Int!
  newValue: Int!
  oldValue: Int!
  reason: RewardChangeReason!
}

type RewardScore {
  log: [RewardLogItem!]!
  percentage: Float!
  value: Int!
}

type RewardScores {
  fitness: RewardScore!
  growth: RewardScore!
  health: RewardScore!
  power: RewardScore!
  strength: RewardScore!
}

type ScoreboardItem {
  powerScore: Int!
  user: PublicUserInfo
  userId: UUID!
}

type Section {
  chapter: Chapter!
  chapterId: UUID!
  courseId: UUID!
  id: UUID!
  name: String!
  stages: [Stage!]!
}

type SectionMutation {
  createStage(input: CreateStageInput): Stage!
  deleteSection: UUID!
  deleteStage(id: UUID!): UUID!
  sectionId: UUID!
  updateSectionName(name: String!): Section!
  updateStage(input: UpdateStageInput): Stage!
  updateStageOrder(stages: [UUID!]!): Section!
}

type SelfAssessmentQuestion implements Question {
  hint: JSON
  itemId: UUID!
  number: Int!
  solutionSuggestion: JSON!
  text: JSON!
  type: QuestionType!
}

interface SemanticSearchResult {
  score: Float!
}

type Settings {
  gamification: Gamification
  notification: Notification
}

input SettingsInput {
  gamification: Gamification
  notification: NotificationInput
}

type SingleAssociation {
  feedback: JSON
  left: JSON!
  right: JSON!
}

directive @Size(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.Size.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type Skill {
  id: UUID!
  isCustomSkill: Boolean!
  skillCategory: String!
  skillLevels: SkillLevels
  skillName: String!
}

input SkillInput {
  id: UUID
  isCustomSkill: Boolean!
  skillCategory: String!
  skillName: String!
}

type SkillLevel {
  log: [SkillLevelLogItem!]!
  value: Float!
}

type SkillLevelLogItem {
  associatedContents: [Content]!
  associatedItemId: UUID!
  date: DateTime!
  difference: Float!
  newValue: Float!
  oldValue: Float!
  predictedCorrectness: Float!
  userResponse: Float!
}

type SkillLevels {
  analyze: SkillLevel
  apply: SkillLevel
  create: SkillLevel
  evaluate: SkillLevel
  remember: SkillLevel
  understand: SkillLevel
}

enum SkillType {
  ANALYZE
  APPLY
  CREATE
  EVALUATE
  REMEMBER
  UNDERSTAND
}

enum SortDirection {
  ASC
  DESC
}

directive @specifiedBy(url: String!) on SCALAR

type Stage {
  id: UUID!

  #
  # Position of the Stage within the Section
  position: Int!

  #
  # List of Content that is labeled as required content
  requiredContents: [Content!]!

  #
  # Percentage of User Progress made to required Content
  requiredContentsProgress: Float!

  #
  # List of Content that is labeled as optional content
  optionalContents: [Content!]!

  #
  # Percentage of Progress made to optional Content
  optionalContentsProgress: Float!

  #
  # For the current user, returns true if this stage could be worked on by the user (i.e. it is not locked), false
  # if stage is not available to be worked on (e.g. because previous stage has not been completed)
  isAvailableToBeWorkedOn: Boolean!
}

#
# Filter for string values.
# If multiple filters are specified, they are combined with AND.
input StringFilter {
  #
  # A string value to match exactly.
  equals: String

  #
  # A string value that must be contained in the field that is being filtered.
  contains: String

  #
  # If true, the filter is case-insensitive.
  ignoreCase: Boolean! = false
}

type StudentMapping {
  #
  # Student Id in Meitrex
  meitrexStudentId: UUID!

  #
  # Student Id in external system like TMS
  externalStudentId: String!
}

input StudentMappingInput {
  #
  # Student Id in Meitrex
  meitrexStudentId: UUID!

  #
  # Student Id in external system like TMS
  externalStudentId: String!
}

type Subexercise {
  #
  # Unique identifier of the exercise and the id of the corresponding item
  itemId: UUID!

  #
  # The amount of credits that can be earned on this sub-exercise.
  totalSubexerciseCredits: Float!

  #
  # The number of the exercise on the exercise sheet, may be something such as 2b (optional).
  number: String

  #
  # Feedback given by a tutor on the exercise (optional).
  tutorFeedback: String
}

input SubexerciseCompletedInput {
  #
  # ID of the subexercise.
  itemId: UUID!

  #
  # The absolute number of achieved credits.
  achievedCredits: Float!
}

type SubexerciseGrading {
  #
  # ID of the subexercise.
  itemId: UUID!

  #
  # ID of the student the subexercise-grading belongs to.
  studentId: UUID!

  #
  # The absolute number of achieved credits on the subexercise.
  achievedCredits: Float!
}

#
# Represents a suggestion for a user to learn new content or review old content.
type Suggestion {
  #
  # The content that is suggested to the user.
  content: Content!

  #
  # The type of suggestion.
  type: SuggestionType!
}

enum SuggestionType {
  NEW_CONTENT
  REPETITION
}

scalar Time

#
# An Unfinished Grading is created, when importing and parsing gradings from external systems like TMS goes wrong
# because the student id has to be mapped manually.
# After an admin mapped ids manually, these unfinished gradings will be tried again.
type UnfinishedGrading {
  #
  # Student Id in external system like TMS
  externalStudentId: String!

  #
  # Assignment/HandIn id in MEITREX
  assignmentId: UUID!

  #
  # JSON representation of the grading
  gradingJson: String!

  #
  # The number of times importing and parsing was tried. Might be useful for detecting and manually deleting broken gradings.
  numberOfTries: Int!
}

input UpdateAssessmentInput {
  #
  # Metadata for the new Content
  metadata: UpdateContentMetadataInput!

  #
  # Assessment metadata
  assessmentMetadata: AssessmentMetadataInput!

  #
  # items of the new assessments
  items: [ItemInput!]
}

input UpdateAssignmentInput {
  requiredPercentage: Float
}

input UpdateAssociationQuestionInput {
  #
  # UUID of the question to update and the id of the corresponding item.
  itemId: UUID!

  #
  # Text of the question, in SlateJS JSON format.
  text: JSON!

  #
  # List of associations.
  correctAssociations: [AssociationInput!]!
  hint: JSON
  itemId: UUID!
  text: JSON!
}

input UpdateChapterInput {
  description: String!
  endDate: DateTime!
  id: UUID!
  number: Int!
  startDate: DateTime!
  suggestedEndDate: DateTime
  suggestedStartDate: DateTime
  title: String!
}

input UpdateClozeQuestionInput {
  additionalWrongAnswers: [String!]!
  clozeElements: [ClozeElementInput!]!
  hint: JSON
  itemId: UUID!
  showBlanksList: Boolean! = true
}

input UpdateContentMetadataInput {
  chapterId: UUID!
  name: String!
  rewardPoints: Int!
  suggestedDate: DateTime!
  tagNames: [String!]! = []
}

input UpdateCourseInput {
  description: String!
  endDate: DateTime!
  id: UUID!
  published: Boolean!
  startDate: DateTime!
  startYear: Int
  title: String!
  yearDivision: YearDivision
}

input UpdateExactAnswerQuestionInput {
  #
  # UUID of the question to update and the id of the corresponding item.
  itemId: UUID!

  #
  # Text of the question, in SlateJS JSON format.
  text: JSON!

  #
  # A list of possible correct answers.
  correctAnswers: [String!]!

  #
  # If the answer is case sensitive. If true, the answer is checked case sensitive.
  caseSensitive: Boolean! = false

  #
  # Feedback for the question when the user enters a wrong answer, in SlateJS JSON format.
  feedback: JSON

  #
  # Optional hint for the question, in SlateJS JSON format.
  hint: JSON
}

input UpdateExerciseInput {
  #
  # Id of the exercise to update.
  itemId: UUID!

  #
  # The amount of credits that can be earned on this exercise including all sub-exercises. (Positive or zero)
  totalExerciseCredits: Float!

  #
  # Sub-exercises making up the exercise, i.e. parts a),b),c),...
  subexercises: [CreateSubexerciseInput!]!

  #
  # The number of the exercise on the exercise sheet, may be something such as 2 (optional).
  number: String
}

input UpdateFlashcardInput {
  itemId: UUID!
  sides: [FlashcardSideInput!]!
}

input UpdateMediaContentInput {
  metadata: UpdateContentMetadataInput!
}

input UpdateMediaRecordInput {
  contentIds: [UUID!]!
  id: UUID!
  name: String!
  type: MediaType!
}

input UpdateMultipleChoiceQuestionInput {
  answers: [MultipleChoiceAnswerInput!]!
  hint: JSON
  itemId: UUID!
  text: JSON!
}

input UpdateNumericQuestionInput {
  correctAnswer: Float!
  feedback: JSON
  hint: JSON
  itemId: UUID!
  text: JSON!
  tolerance: Float!
}

input UpdateSelfAssessmentQuestionInput {
  hint: JSON
  itemId: UUID!
  solutionSuggestion: JSON!
  text: JSON!
}

input UpdateStageInput {
  id: UUID!

  #
  # updated List of UUIDs for content labeled as required in this Stage
  requiredContents: [UUID!]!

  #
  # updated List of UUIDs for content labeled as optional in this Stage
  optionalContents: [UUID!]!
}

input UpdateSubexerciseInput {
  #
  # Id of the subexercise to update.
  itemId: UUID!

  #
  # The amount of credits that can be earned on this sub-exercise. (Positive or zero)
  totalSubexerciseCredits: Float!

  #
  # The number of the exercise on the exercise sheet, may be something such as 2b (optional).
  number: String
}

# A Url scalar
scalar Url

type UserInfo {
  availableCourseMemberships: [CourseMembership!]!
  courseMemberships: [CourseMembership!]!
  firstName: String!
  id: UUID!
  lastName: String!
  mediaRecords: [MediaRecord!]!
  realmRoles: [GlobalUserRole!]!
  unavailableCourseMemberships: [CourseMembership!]!
  userName: String!
}

type UserProgressData {
  contentId: UUID!
  isDueForReview: Boolean!
  isLearned: Boolean!
  lastLearnDate: DateTime
  learningInterval: Int
  log: [ProgressLogItem]!
  nextLearnDate: DateTime
  userId: UUID!
}

enum UserRoleInCourse {
  ADMINISTRATOR
  STUDENT
  TUTOR
}

scalar UUID

type VideoRecordSegment implements MediaRecordSegment {
  id: UUID!
  mediaRecord: MediaRecord!
  mediaRecordId: UUID!
  screenText: String!
  startTime: Int!
  thumbnail: String!
  title: String
  transcript: String!
}

enum YearDivision {
  FIRST_QUARTER
  FIRST_SEMESTER
  FIRST_TRIMESTER
  FOURTH_QUARTER
  SECOND_QUARTER
  SECOND_SEMESTER
  SECOND_TRIMESTER
  THIRD_QUARTER
  THIRD_TRIMESTER
}
